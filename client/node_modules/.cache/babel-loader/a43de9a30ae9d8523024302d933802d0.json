{"ast":null,"code":"export function fetchProgressions() {\n  return dispatch => {\n    dispatch({\n      type: 'START_ADDING_PROGRESSIONS_REQUEST'\n    });\n    fetch(\"/progressions\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(progressions => {\n      if (progressions.error) {\n        console.log(\"Can't load progressions\");\n      } else {\n        dispatch({\n          type: 'ADD_VIDEOS',\n          videos: progressions.videos\n        });\n        dispatch({\n          type: 'ADD_REFLECTIONS',\n          reflections: progressions.reflections\n        });\n        dispatch({\n          type: 'ADD_PROGRESSIONS',\n          progressions: progressions.progressions\n        });\n      }\n    });\n  };\n}\nexport function addProgression(progression, history) {\n  return dispatch => {\n    dispatch({\n      type: 'START_ADDING_PROGRESSION_REQUEST'\n    });\n    fetch(\"/progressions\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(progression => {\n      if (progression.error) {\n        dispatch({\n          type: 'ADD_FLASH_MESSAGE',\n          message: progression.error\n        });\n      } else {\n        dispatch({\n          type: 'ADD_PROGRESSION',\n          progression\n        });\n        dispatch({\n          type: 'ADD_FLASH_MESSAGE',\n          message: \"Progression Added\"\n        });\n        history.push('/progressions');\n      }\n    });\n  };\n}\nexport function editProgression(progression, history) {\n  return dispatch => {\n    dispatch({\n      type: 'START_EDITING_PROGRESSION_REQUEST'\n    });\n    fetch(\"/progressions/\".concat(progression.progression.id), {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(progression => {\n      if (progression.error) {\n        dispatch({\n          type: 'ADD_FLASH_MESSAGE',\n          message: progression.error\n        });\n      } else {\n        dispatch({\n          type: 'EDIT_PROGRESSION',\n          progression\n        });\n        dispatch({\n          type: 'ADD_FLASH_MESSAGE',\n          message: \"Progression Edited\"\n        });\n        history.push('/progressions');\n      }\n    });\n  };\n}\nexport function deleteProgression(progression) {\n  return dispatch => {\n    dispatch({\n      type: 'START_DELETING_PROGRESSION_REQUEST'\n    });\n    fetch(\"/progressions/\".concat(progression.id), {\n      method: 'DELETE',\n      credentials: \"include\"\n    }).then(resp => resp.json()).then(json => {\n      dispatch({\n        type: 'DELETE_PROGRESSION',\n        progression: json.progression,\n        studentProgressions: json.studentProgressions\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/src/actions/progressionActions.js"],"names":["fetchProgressions","dispatch","type","fetch","method","credentials","headers","then","resp","json","progressions","error","console","log","videos","reflections","addProgression","progression","history","body","JSON","stringify","message","push","editProgression","id","deleteProgression","studentProgressions"],"mappings":"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","sourcesContent":["export function fetchProgressions() {\n  return (dispatch) => {\n    dispatch({type: 'START_ADDING_PROGRESSIONS_REQUEST'})\n    fetch(`/progressions`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(resp => resp.json())\n      .then(progressions => {\n        if (progressions.error){\n          console.log(\"Can't load progressions\")\n        } else {\n          dispatch({ type: 'ADD_VIDEOS', videos: progressions.videos })\n          dispatch({ type: 'ADD_REFLECTIONS', reflections: progressions.reflections })\n          dispatch({ type: 'ADD_PROGRESSIONS', progressions: progressions.progressions })\n        }\n    })\n  }\n}\n\nexport function addProgression(progression, history) {\n  return (dispatch) => {\n    dispatch({type: 'START_ADDING_PROGRESSION_REQUEST'})\n    fetch(`/progressions`, {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(progression => {\n        if (progression.error){\n          dispatch({ type: 'ADD_FLASH_MESSAGE', message: progression.error })\n        } else {\n          dispatch({ type: 'ADD_PROGRESSION', progression })\n          dispatch({ type: 'ADD_FLASH_MESSAGE', message: \"Progression Added\" })\n          history.push('/progressions')\n        }\n      })\n  }\n}\n\nexport function editProgression(progression, history) {\n  return (dispatch) => {\n    dispatch({type: 'START_EDITING_PROGRESSION_REQUEST'})\n    fetch(`/progressions/${progression.progression.id}`, {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(progression => {\n        if (progression.error){\n          dispatch({ type: 'ADD_FLASH_MESSAGE', message: progression.error })\n        } else {\n          dispatch({ type: 'EDIT_PROGRESSION', progression })\n          dispatch({ type: 'ADD_FLASH_MESSAGE', message: \"Progression Edited\" })\n          history.push('/progressions')\n        }\n      })\n\n  }\n}\n\nexport function deleteProgression(progression) {\n  return (dispatch) => {\n    dispatch({type: 'START_DELETING_PROGRESSION_REQUEST'})\n    fetch(`/progressions/${progression.id}`, {\n      method: 'DELETE',\n      credentials: \"include\"\n    })\n      .then(resp => resp.json())\n      .then(json => {\n        dispatch({ type: 'DELETE_PROGRESSION', progression: json.progression, studentProgressions: json.studentProgressions})\n      })\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}