{"ast":null,"code":"import _objectWithoutProperties from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nconst progressionReducer = combineReducers({\n  byId: progressionsById,\n  allIds: allProgressions\n});\nexport default progressionReducer;\n\nfunction progressionsById(state = {}, action) {\n  switch (action.type) {\n    case 'START_ADDING_PROGRESSIONS_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'ADD_PROGRESSIONS':\n      const normalizedObject = {};\n      action.progressions.forEach(progression => {\n        progression.videos = progression.videos.sort((a, b) => {\n          return a.progression_index - b.progression_index;\n        });\n        progression.videos = progression.videos.map(video => \"video\".concat(video.id));\n        normalizedObject[\"progression\".concat(progression.id)] = progression;\n      });\n      return _objectSpread({}, normalizedObject);\n\n    case 'START_ADDING_PROGRESSION_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'ADD_PROGRESSION':\n      const newProgression = _objectSpread({}, action.progression);\n\n      newProgression.videos = newProgression.videos.sort((a, b) => {\n        return a.progression_index - b.progression_index;\n      });\n      newProgression.videos = newProgression.videos.map(video => \"video\".concat(video.id));\n      const progressionId = \"progression\".concat(newProgression.id);\n      return _objectSpread({}, state, {\n        [progressionId]: newProgression\n      });\n\n    case 'START_EDITING_PROGRESSION_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'EDIT_PROGRESSION':\n      const editedProgression = _objectSpread({}, action.progression);\n\n      editedProgression.videos = editedProgression.videos.sort((a, b) => {\n        return a.progression_index - b.progression_index;\n      });\n      editedProgression.videos = editedProgression.videos.map(video => \"video\".concat(video.id));\n      const progId = \"progression\".concat(editedProgression.id);\n      debugger;\n      return _objectSpread({}, state, {\n        [progId]: editedProgression\n      });\n\n    case 'START_DELETING_PROGRESSION_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'DELETE_PROGRESSION':\n      const deleteProgressionId = \"progression\".concat(action.progression.id);\n\n      const value = state[deleteProgressionId],\n            newState = _objectWithoutProperties(state, [deleteProgressionId].map(_toPropertyKey));\n\n      return _objectSpread({}, newState);\n\n    default:\n      return state;\n  }\n}\n\nfunction allProgressions(state = [], action) {\n  switch (action.type) {\n    case 'ADD_PROGRESSIONS':\n      return [...action.progressions.map(progression => \"progression\".concat(progression.id))];\n\n    case 'ADD_PROGRESSION':\n      const progressionId = \"progression\".concat(action.progression.id);\n      return [...state, progressionId];\n\n    case 'DELETE_PROGRESSION':\n      const progressionIdToDelete = \"progression\".concat(action.progression.id);\n      return state.filter(pId => pId !== progressionIdToDelete);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/progressionReducer.js"],"names":["combineReducers","progressionReducer","byId","progressionsById","allIds","allProgressions","state","action","type","normalizedObject","progressions","forEach","progression","videos","sort","a","b","progression_index","map","video","id","newProgression","progressionId","editedProgression","progId","deleteProgressionId","value","newState","progressionIdToDelete","filter","pId"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\nconst progressionReducer = combineReducers({\n  byId: progressionsById,\n  allIds: allProgressions\n})\n\nexport default progressionReducer\n\nfunction progressionsById(state = {}, action) {\n  switch(action.type) {\n\n    case 'START_ADDING_PROGRESSIONS_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'ADD_PROGRESSIONS':\n      const normalizedObject = {}\n      action.progressions.forEach(progression => {\n        progression.videos = progression.videos.sort((a,b) => {\n          return a.progression_index - b.progression_index\n        })\n        progression.videos = progression.videos.map(video => `video${video.id}`)\n        normalizedObject[`progression${progression.id}`] = progression\n      })\n\n     return {\n       ...normalizedObject\n     }\n\n    case 'START_ADDING_PROGRESSION_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'ADD_PROGRESSION':\n      const newProgression = {...action.progression}\n      newProgression.videos = newProgression.videos.sort((a,b) => {\n        return a.progression_index - b.progression_index\n      })\n      newProgression.videos = newProgression.videos.map(video => `video${video.id}`)\n      const progressionId = `progression${newProgression.id}`\n      return {\n        ...state,\n        [progressionId]: newProgression\n      }\n\n    case 'START_EDITING_PROGRESSION_REQUEST':\n      return {...state}\n\n    case 'EDIT_PROGRESSION':\n      const editedProgression = {...action.progression}\n      editedProgression.videos = editedProgression.videos.sort((a,b) => {\n        return a.progression_index - b.progression_index\n      })\n      editedProgression.videos = editedProgression.videos.map(video => `video${video.id}`)\n      const progId = `progression${editedProgression.id}`\n\n      debugger\n      return {\n        ...state, [progId]: editedProgression\n      }\n\n    case 'START_DELETING_PROGRESSION_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'DELETE_PROGRESSION':\n      const deleteProgressionId = `progression${action.progression.id}`\n      const { [deleteProgressionId]: value, ...newState  } = state\n\n      return {\n        ...newState\n      }\n\n    default:\n      return state\n  }\n}\n\nfunction allProgressions(state = [], action) {\n\n  switch(action.type) {\n\n    case 'ADD_PROGRESSIONS':\n      return [\n        ...action.progressions.map(progression => `progression${progression.id}`)\n      ]\n\n    case 'ADD_PROGRESSION':\n      const progressionId = `progression${action.progression.id}`\n      return [...state, progressionId]\n\n    case 'DELETE_PROGRESSION':\n      const progressionIdToDelete = `progression${action.progression.id}`\n      return state.filter(pId => pId !== progressionIdToDelete)\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}