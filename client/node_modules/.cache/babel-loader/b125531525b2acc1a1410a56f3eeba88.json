{"ast":null,"code":"function videoSearchReducer(state = [], action) {\n  switch (action.type) {\n    case 'START_ADDING_VIDEOS_REQUEST':\n      return [...state];\n\n    case 'START_YOUTUBE_SEARCH_REQUEST':\n      return [...state];\n\n    case 'ADD_VIMEO_VIDEOS':\n      debugger;\n      return [...createVimeoVideoObjects(action.videos.data)];\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return [...createYouTubeVideoObjects(action.videos.items)];\n\n    default:\n      return state;\n  }\n}\n\nexport default videoSearchReducer;\n\nfunction formatTitle(unformattedTitle) {\n  const parser = new DOMParser();\n  let title = parser.parseFromString('<!doctype html><body>' + unformattedTitle, 'text/html');\n  return title.body.textContent;\n}\n\nfunction formatDate(publishedAt) {\n  const date = new Date(publishedAt);\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = MONTHS[date.getMonth()];\n  const day = date.getDate();\n  const year = date.getFullYear();\n  return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n}\n\nfunction createVimeoVideoObjects(videos) {\n  return videos.map(video => {\n    return {\n      title: video.name,\n      videoId: video.uri.split('/')[2],\n      channelTitle: video.user.name,\n      description: video.description,\n      date: formatDate(video.created_time),\n      thumbnailUrl: video.pictures.sizes[1].link,\n      url: video.embed.html.match(/https[^\\s\"]+/)[0]\n    };\n  });\n}\n\nfunction createYouTubeVideoObjects(videos) {\n  return videos.map(video => {\n    const url = 'http://www.youtube.com/embed/' + video.id.videoId;\n    return {\n      title: this.formatTitle(video.snippet.title),\n      videoId: video.id.videoId,\n      channelTitle: video.snippet.channelTitle,\n      description: video.snippet.description,\n      date: this.formatDate(video.snippet.publishedAt),\n      thumbnailUrl: video.snippet.thumbnails.medium.url,\n      url: url\n    };\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/videoSearchReducer.js"],"names":["videoSearchReducer","state","action","type","createVimeoVideoObjects","videos","data","createYouTubeVideoObjects","items","formatTitle","unformattedTitle","parser","DOMParser","title","parseFromString","body","textContent","formatDate","publishedAt","date","Date","MONTHS","month","getMonth","day","getDate","year","getFullYear","map","video","name","videoId","uri","split","channelTitle","user","description","created_time","thumbnailUrl","pictures","sizes","link","url","embed","html","match","id","snippet","thumbnails","medium"],"mappings":"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","sourcesContent":["function videoSearchReducer(state = [], action) {\n  switch(action.type) {\n\n    case 'START_ADDING_VIDEOS_REQUEST':\n      return [\n        ...state\n      ]\n\n    case 'START_YOUTUBE_SEARCH_REQUEST':\n      return [\n        ...state\n      ]\n\n    case 'ADD_VIMEO_VIDEOS':\n      debugger\n      return [\n        ...createVimeoVideoObjects(action.videos.data)\n      ]\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return [\n        ...createYouTubeVideoObjects(action.videos.items)\n      ]\n\n    default:\n      return state\n  }\n}\n\nexport default videoSearchReducer\n\nfunction formatTitle(unformattedTitle){\n  const parser = new DOMParser()\n  let title = parser.parseFromString('<!doctype html><body>' + unformattedTitle, 'text/html')\n  return title.body.textContent\n}\n\nfunction formatDate(publishedAt){\n  const date = new Date(publishedAt)\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n  const month = MONTHS[date.getMonth()]\n  const day = date.getDate()\n  const year = date.getFullYear()\n  return `${month} ${day}, ${year}`\n}\n\nfunction createVimeoVideoObjects(videos){\n  return videos.map(video => {\n    return {\n      title: video.name,\n      videoId: video.uri.split('/')[2],\n      channelTitle: video.user.name,\n      description: video.description,\n      date: formatDate(video.created_time),\n      thumbnailUrl: video.pictures.sizes[1].link,\n      url: video.embed.html.match(/https[^\\s\"]+/)[0]\n    }\n  })\n}\n\nfunction createYouTubeVideoObjects(videos){\n  return videos.map(video => {\n    const url = 'http://www.youtube.com/embed/' + video.id.videoId\n    return {\n      title: this.formatTitle(video.snippet.title),\n      videoId: video.id.videoId,\n      channelTitle: video.snippet.channelTitle,\n      description: video.snippet.description,\n      date: this.formatDate(video.snippet.publishedAt),\n      thumbnailUrl: video.snippet.thumbnails.medium.url,\n      url: url\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}