{"ast":null,"code":"import _objectWithoutProperties from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nconst studentProgressionReducer = combineReducers({\n  byId: studentProgressionsById,\n  allIds: allStudentProgressions\n});\nexport default studentProgressionReducer;\n\nfunction studentProgressionsById(state = {}, action) {\n  switch (action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return {};\n\n    case 'ADD_STUDENTS':\n      return _objectSpread({}, normalizedObjectCreator(action));\n\n    case 'START_ADDING_STUDENT_PROGRESSION_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'ADD_STUDENT_PROGRESSION':\n      const _action$studentProgre = action.studentProgression,\n            submitted_at = _action$studentProgre.submitted_at,\n            graded_at = _action$studentProgre.graded_at,\n            question1_comment = _action$studentProgre.question1_comment,\n            graded = _action$studentProgre.graded,\n            updated_at = _action$studentProgre.updated_at,\n            question1_answer = _action$studentProgre.question1_answer,\n            id = _action$studentProgre.id,\n            agenda_index = _action$studentProgre.agenda_index,\n            student_id = _action$studentProgre.student_id,\n            progression_id = _action$studentProgre.progression_id,\n            submitted = _action$studentProgre.submitted,\n            created_at = _action$studentProgre.created_at;\n      return _objectSpread({}, state, {\n        [\"studentProgression\".concat(id)]: {\n          id: id,\n          agendaIndex: agenda_index,\n          studentId: \"student\".concat(student_id),\n          progressionId: \"progression\".concat(progression_id),\n          submitted: submitted,\n          createdAt: created_at,\n          updatedAt: updated_at,\n          submittedAt: submitted_at,\n          gradedAt: graded_at,\n          question1Answer: question1_answer,\n          question1Comment: question1_comment,\n          graded: graded\n        }\n      });\n\n    case 'START_SWITCH_PROGRESSION_REQUEST':\n      const allSps = _objectSpread({}, state);\n\n      const modifiedObjs = switchAgendaOrder(action, allSps);\n      return _objectSpread({}, state, {\n        modifiedObjs\n      });\n\n    case 'SWITCH_PROGRESSION':\n      const normalizedObj = {};\n      return _objectSpread({}, state, {}, normalizedObjectCreator(action));\n\n    case 'UPDATE_STUDENT_PROGRESSION':\n      const sp = action.studentProgression;\n      const normalObj = {\n        id: sp.id,\n        agendaIndex: sp.agenda_index,\n        studentId: \"student\".concat(sp.student_id),\n        progressionId: \"progression\".concat(sp.progression_id),\n        submitted: sp.submitted,\n        createdAt: sp.created_at,\n        updatedAt: sp.updated_at,\n        question1Answer: sp.question1_answer,\n        question1Comment: sp.question1_comment,\n        graded: sp.graded,\n        gradedAt: sp.graded_at,\n        submittedAt: sp.submitted_at\n      };\n      return _objectSpread({}, state, {\n        [\"studentProgression\".concat(sp.id)]: normalObj\n      });\n\n    case 'START_REMOVE_PROGRESSION_FROM_STUDENT_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const studentProgId = \"studentProgression\".concat(action.studentProgression.id);\n\n      const value = state[studentProgId],\n            newState = _objectWithoutProperties(state, [studentProgId].map(_toPropertyKey));\n\n      return _objectSpread({}, newState);\n\n    default:\n      return state;\n  }\n}\n\nfunction allStudentProgressions(state = [], action) {\n  switch (action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return [];\n\n    case 'ADD_STUDENTS':\n      return [...action.studentProgressions.map(stPr => \"studentProgression\".concat(stPr.id))];\n\n    case 'ADD_STUDENT_PROGRESSION':\n      return [...state, \"studentProgression\".concat(action.studentProgression.id)];\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const stProgIdToDelete = \"studentProgression\".concat(action.studentProgression.id);\n      return state.filter(pId => pId !== stProgIdToDelete);\n\n    case 'DELETE_PROGRESSION':\n      const spsToRemove = action.studentProgressions.map(sp => \"studentProgression\".concat(sp.id));\n      return state.filter(sp => !spsToRemove.includes(sp));\n\n    default:\n      return state;\n  }\n}\n\nfunction switchAgendaOrder(action, allSps) {\n  let currStProgression;\n  let myStudentProgressions = [];\n  const studId = \"student\".concat(action.draggableId.split(\"-\")[1]);\n  const progId = \"progression\".concat(action.draggableId.split(\"-\")[3]);\n\n  for (const sp in allSps) {\n    if (allSps[sp].studentId === studId) {\n      myStudentProgressions.push(allSps[sp]);\n    }\n\n    if (allSps[sp].studentId === studId && allSps[sp].progressionId === progId) {\n      currStProgression = allSps[sp];\n    }\n  }\n\n  myStudentProgressions = myStudentProgressions.sort((a, b) => a.agendaIndex - b.agendaIndex);\n  myStudentProgressions = myStudentProgressions.filter(sp => sp.id !== currStProgression.id);\n  myStudentProgressions.splice(action.newIndex, 0, currStProgression);\n  const modifiedObj = {};\n  myStudentProgressions.forEach((sp, index) => {\n    sp.agendaIndex = index;\n    modifiedObj[\"studentProgression\".concat(sp.id)] = sp;\n  });\n  return modifiedObj;\n}\n\nfunction normalizedObjectCreator(action) {\n  const normalizedObject = {};\n  action.studentProgressions.forEach(stProg => {\n    normalizedObject[\"studentProgression\".concat(stProg.id)] = {\n      id: stProg.id,\n      agendaIndex: stProg.agenda_index,\n      studentId: \"student\".concat(stProg.student_id),\n      progressionId: \"progression\".concat(stProg.progression_id),\n      submitted: stProg.submitted,\n      submittedAt: stProg.submitted_at,\n      createdAt: stProg.created_at,\n      updatedAt: stProg.updated_at,\n      question1Answer: stProg.question1_answer,\n      question1Comment: stProg.question1_comment,\n      graded: stProg.graded,\n      gradedAt: stProg.graded_at\n    };\n  });\n  return normalizedObject;\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/studentProgressionReducer.js"],"names":["combineReducers","studentProgressionReducer","byId","studentProgressionsById","allIds","allStudentProgressions","state","action","type","normalizedObjectCreator","studentProgression","submitted_at","graded_at","question1_comment","graded","updated_at","question1_answer","id","agenda_index","student_id","progression_id","submitted","created_at","agendaIndex","studentId","progressionId","createdAt","updatedAt","submittedAt","gradedAt","question1Answer","question1Comment","allSps","modifiedObjs","switchAgendaOrder","normalizedObj","sp","normalObj","studentProgId","value","newState","studentProgressions","map","stPr","stProgIdToDelete","filter","pId","spsToRemove","includes","currStProgression","myStudentProgressions","studId","draggableId","split","progId","push","sort","a","b","splice","newIndex","modifiedObj","forEach","index","normalizedObject","stProg"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\nconst studentProgressionReducer = combineReducers({\n  byId: studentProgressionsById,\n  allIds: allStudentProgressions\n})\n\nexport default studentProgressionReducer\n\nfunction studentProgressionsById(state = {}, action) {\n  switch(action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return {}\n\n    case 'ADD_STUDENTS':\n\n    return {\n      ...normalizedObjectCreator(action)\n    }\n\n    case 'START_ADDING_STUDENT_PROGRESSION_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'ADD_STUDENT_PROGRESSION':\n      const { submitted_at, graded_at, question1_comment, graded, updated_at, question1_answer, id, agenda_index, student_id, progression_id, submitted, created_at } = action.studentProgression\n      return {\n        ...state,\n        [`studentProgression${id}`]: {\n          id: id,\n          agendaIndex: agenda_index,\n          studentId: `student${student_id}`,\n          progressionId: `progression${progression_id}`,\n          submitted: submitted,\n          createdAt: created_at,\n          updatedAt: updated_at,\n          submittedAt: submitted_at,\n          gradedAt: graded_at,\n          question1Answer: question1_answer,\n          question1Comment: question1_comment,\n          graded: graded\n        }\n      }\n\n    case 'START_SWITCH_PROGRESSION_REQUEST':\n      const allSps = {...state}\n      const modifiedObjs = switchAgendaOrder(action, allSps)\n      return {...state, modifiedObjs }\n\n    case 'SWITCH_PROGRESSION':\n      const normalizedObj = {}\n      return {...state, ...normalizedObjectCreator(action)}\n\n    case 'UPDATE_STUDENT_PROGRESSION':\n      const sp = action.studentProgression\n      const normalObj  = {\n        id: sp.id,\n        agendaIndex: sp.agenda_index,\n        studentId: `student${sp.student_id}`,\n        progressionId: `progression${sp.progression_id}`,\n        submitted: sp.submitted,\n        createdAt: sp.created_at,\n        updatedAt: sp.updated_at,\n        question1Answer: sp.question1_answer,\n        question1Comment: sp.question1_comment,\n        graded: sp.graded,\n        gradedAt: sp.graded_at,\n        submittedAt: sp.submitted_at\n      }\n      return {\n        ...state,\n        [`studentProgression${sp.id}`]: normalObj\n      }\n\n    case 'START_REMOVE_PROGRESSION_FROM_STUDENT_REQUEST':\n      return {...state}\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const studentProgId = `studentProgression${action.studentProgression.id}`\n      const { [studentProgId]: value, ...newState  } = state\n\n      return {\n        ...newState\n      }\n\n    default:\n      return state\n  }\n}\n\nfunction allStudentProgressions(state = [], action) {\n\n  switch(action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return []\n\n    case 'ADD_STUDENTS':\n    return [\n      ...action.studentProgressions.map(stPr => `studentProgression${stPr.id}`)\n    ]\n\n    case 'ADD_STUDENT_PROGRESSION':\n    return [\n      ...state, `studentProgression${action.studentProgression.id}`\n    ]\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const stProgIdToDelete = `studentProgression${action.studentProgression.id}`\n      return state.filter(pId => pId !== stProgIdToDelete)\n\n    case 'DELETE_PROGRESSION':\n      const spsToRemove = action.studentProgressions.map(sp => `studentProgression${sp.id}`)\n      return state.filter(sp => !spsToRemove.includes(sp))\n    default:\n      return state\n  }\n}\n\nfunction switchAgendaOrder(action, allSps){\n  let currStProgression\n  let myStudentProgressions = []\n  const studId = `student${action.draggableId.split(\"-\")[1]}`\n  const progId = `progression${action.draggableId.split(\"-\")[3]}`\n  for(const sp in allSps){\n    if (allSps[sp].studentId === studId) {\n      myStudentProgressions.push(allSps[sp])\n    }\n    if (allSps[sp].studentId === studId && allSps[sp].progressionId === progId){\n      currStProgression = allSps[sp]\n    }\n  }\n\n  myStudentProgressions = myStudentProgressions.sort((a,b) => a.agendaIndex - b.agendaIndex)\n  myStudentProgressions = myStudentProgressions.filter(sp => sp.id !== currStProgression.id)\n  myStudentProgressions.splice(action.newIndex, 0, currStProgression)\n\n  const modifiedObj = {}\n  myStudentProgressions.forEach((sp, index) => {\n    sp.agendaIndex = index\n    modifiedObj[`studentProgression${sp.id}`] = sp\n  })\n  return modifiedObj\n}\n\nfunction normalizedObjectCreator(action){\n  const normalizedObject = {}\n  action.studentProgressions.forEach(stProg => {\n    normalizedObject[`studentProgression${stProg.id}`] = {\n      id: stProg.id,\n      agendaIndex: stProg.agenda_index,\n      studentId: `student${stProg.student_id}`,\n      progressionId: `progression${stProg.progression_id}`,\n      submitted: stProg.submitted,\n      submittedAt: stProg.submitted_at,\n      createdAt: stProg.created_at,\n      updatedAt: stProg.updated_at,\n      question1Answer: stProg.question1_answer,\n      question1Comment: stProg.question1_comment,\n      graded: stProg.graded,\n      gradedAt: stProg.graded_at\n    }\n  })\n  return normalizedObject\n}\n"]},"metadata":{},"sourceType":"module"}