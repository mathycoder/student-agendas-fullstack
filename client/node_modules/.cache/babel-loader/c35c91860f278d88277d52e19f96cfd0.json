{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/final/student-agendas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/adamsarli/Coding/final/student-agendas/src/videos/VideoSearchContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport DisplaySearchResults from './DisplaySearchResults';\nimport DisplayPreview from './DisplayPreview';\nconst YOUTUBE_API_KEY = 'AIzaSyB5XRdK1vbRRW-XUG7yKe1V5GH86KAOuJ4';\nconst URL1 = 'https://www.googleapis.com/youtube/v3/search';\nconst URL2 = \"?key=\".concat(YOUTUBE_API_KEY, \"&part=snippet&safeSearch=strict&type=video&videoEmbeddable=true&maxResults=50\");\n\nclass VideoSearchContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videos: [],\n      searchTerm: \"\",\n      videoIndex: ''\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        videos: this.state.videos,\n        searchTerm: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      fetch(URL1 + URL2 + \"&q=\".concat(this.state.searchTerm)).then(resp => resp.json()).then(json => {\n        this.setState({\n          videos: this.createVideoObjects(json.items),\n          searchTerm: \"\"\n        });\n        console.log(this.createVideoObjects(json.items));\n      });\n    };\n\n    this.handleVideoClick = index => {\n      this.setState(_objectSpread({}, this.state, {\n        videos: [...this.state.videos],\n        videoIndex: index\n      }));\n    };\n\n    this.formatTitle = unformattedTitle => {\n      const parser = new DOMParser();\n      let title = parser.parseFromString('<!doctype html><body>' + unformattedTitle, 'text/html');\n      return title.body.textContent;\n    };\n\n    this.formatDate = publishedAt => {\n      const date = new Date(publishedAt);\n      const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n      const month = MONTHS[date.getMonth()];\n      const day = date.getDate();\n      const year = date.getFullYear();\n      return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n    };\n\n    this.createVideoObjects = videos => {\n      return videos.map(video => {\n        const url = 'http://www.youtube.com/embed/' + video.id.videoId;\n        return {\n          title: this.formatTitle(video.snippet.title),\n          videoId: video.id.videoId,\n          channelTitle: video.snippet.channelTitle,\n          description: video.snippet.description,\n          date: this.formatDate(video.snippet.publishedAt),\n          thumbnailUrl: video.snippet.thumbnails.medium.url,\n          url: url\n        };\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"searched-videos-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.searchTerm,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"search-videos-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(DisplaySearchResults, {\n      handleDragStart: this.props.handleDragStart,\n      handleVideoClick: this.handleVideoClick,\n      videos: this.state.videos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), this.state.videoIndex !== \"\" ? React.createElement(DisplayPreview, {\n      addToProgression: this.props.addToProgression,\n      video: this.state.videos[this.state.videoIndex],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }) : ''));\n  }\n\n}\n\nexport default VideoSearchContainer;","map":{"version":3,"sources":["/Users/adamsarli/Coding/final/student-agendas/src/videos/VideoSearchContainer.js"],"names":["React","Component","DisplaySearchResults","DisplayPreview","YOUTUBE_API_KEY","URL1","URL2","VideoSearchContainer","state","videos","searchTerm","videoIndex","handleChange","event","setState","target","value","handleSubmit","preventDefault","fetch","then","resp","json","createVideoObjects","items","console","log","handleVideoClick","index","formatTitle","unformattedTitle","parser","DOMParser","title","parseFromString","body","textContent","formatDate","publishedAt","date","Date","MONTHS","month","getMonth","day","getDate","year","getFullYear","map","video","url","id","videoId","snippet","channelTitle","description","thumbnailUrl","thumbnails","medium","render","props","handleDragStart","addToProgression"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,eAAe,GAAG,yCAAxB;AACA,MAAMC,IAAI,GAAG,8CAAb;AACA,MAAMC,IAAI,kBAAWF,eAAX,kFAAV;;AAEA,MAAMG,oBAAN,SAAmCN,SAAnC,CAA6C;AAAA;AAAA;AAAA,SAC3CO,KAD2C,GACnC;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,UAAU,EAAE;AAHN,KADmC;;AAAA,SAO3CC,YAP2C,GAO3BC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AACZL,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MADP;AAEZC,QAAAA,UAAU,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAFb,OAAd;AAID,KAZ0C;;AAAA,SAc3CC,YAd2C,GAc3BJ,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACK,cAAN;AACAC,MAAAA,KAAK,CAACd,IAAI,GAAGC,IAAP,gBAAoB,KAAKE,KAAL,CAAWE,UAA/B,CAAD,CAAL,CACGU,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQE,IAAI,IAAI;AACZ,aAAKR,QAAL,CAAc;AACZL,UAAAA,MAAM,EAAE,KAAKc,kBAAL,CAAwBD,IAAI,CAACE,KAA7B,CADI;AAEZd,UAAAA,UAAU,EAAE;AAFA,SAAd;AAIAe,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,kBAAL,CAAwBD,IAAI,CAACE,KAA7B,CAAZ;AACD,OARH;AASD,KAzB0C;;AAAA,SA2B3CG,gBA3B2C,GA2BvBC,KAAD,IAAW;AAC5B,WAAKd,QAAL,mBACK,KAAKN,KADV;AAEEC,QAAAA,MAAM,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,MAAf,CAFV;AAGEE,QAAAA,UAAU,EAAEiB;AAHd;AAKD,KAjC0C;;AAAA,SAsD3CC,WAtD2C,GAsD5BC,gBAAD,IAAsB;AAClC,YAAMC,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,UAAIC,KAAK,GAAGF,MAAM,CAACG,eAAP,CAAuB,0BAA0BJ,gBAAjD,EAAmE,WAAnE,CAAZ;AACA,aAAOG,KAAK,CAACE,IAAN,CAAWC,WAAlB;AACD,KA1D0C;;AAAA,SA4D3CC,UA5D2C,GA4D7BC,WAAD,IAAiB;AAC5B,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,WAAT,CAAb;AACA,YAAMG,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,MAAzD,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,KAA/E,CAAf;AACA,YAAMC,KAAK,GAAGD,MAAM,CAACF,IAAI,CAACI,QAAL,EAAD,CAApB;AACA,YAAMC,GAAG,GAAGL,IAAI,CAACM,OAAL,EAAZ;AACA,YAAMC,IAAI,GAAGP,IAAI,CAACQ,WAAL,EAAb;AACA,uBAAUL,KAAV,cAAmBE,GAAnB,eAA2BE,IAA3B;AACD,KAnE0C;;AAAA,SAqE3CvB,kBArE2C,GAqErBd,MAAD,IAAY;AAC/B,aAAOA,MAAM,CAACuC,GAAP,CAAWC,KAAK,IAAI;AACzB,cAAMC,GAAG,GAAG,kCAAkCD,KAAK,CAACE,EAAN,CAASC,OAAvD;AACA,eAAO;AACLnB,UAAAA,KAAK,EAAE,KAAKJ,WAAL,CAAiBoB,KAAK,CAACI,OAAN,CAAcpB,KAA/B,CADF;AAELmB,UAAAA,OAAO,EAAEH,KAAK,CAACE,EAAN,CAASC,OAFb;AAGLE,UAAAA,YAAY,EAAEL,KAAK,CAACI,OAAN,CAAcC,YAHvB;AAILC,UAAAA,WAAW,EAAEN,KAAK,CAACI,OAAN,CAAcE,WAJtB;AAKLhB,UAAAA,IAAI,EAAE,KAAKF,UAAL,CAAgBY,KAAK,CAACI,OAAN,CAAcf,WAA9B,CALD;AAMLkB,UAAAA,YAAY,EAAEP,KAAK,CAACI,OAAN,CAAcI,UAAd,CAAyBC,MAAzB,CAAgCR,GANzC;AAOLA,UAAAA,GAAG,EAAEA;AAPA,SAAP;AASD,OAXM,CAAP;AAYD,KAlF0C;AAAA;;AAmC3CS,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAK1C,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWE,UAFpB;AAGE,MAAA,QAAQ,EAAE,KAAKE,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,EASE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,oBAAD;AAAsB,MAAA,eAAe,EAAE,KAAKgD,KAAL,CAAWC,eAAlD;AAAmE,MAAA,gBAAgB,EAAE,KAAKlC,gBAA1F;AAA4G,MAAA,MAAM,EAAE,KAAKnB,KAAL,CAAWC,MAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKD,KAAL,CAAWG,UAAX,KAA0B,EAA1B,GAA+B,oBAAC,cAAD;AAAgB,MAAA,gBAAgB,EAAE,KAAKiD,KAAL,CAAWE,gBAA7C;AAA+D,MAAA,KAAK,EAAE,KAAKtD,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWG,UAA7B,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,GAAmJ,EAFtJ,CATF,CADF;AAgBD;;AApD0C;;AAqF7C,eAAeJ,oBAAf","sourcesContent":["import React, { Component } from 'react';\nimport DisplaySearchResults from './DisplaySearchResults'\nimport DisplayPreview from './DisplayPreview'\n\nconst YOUTUBE_API_KEY = 'AIzaSyB5XRdK1vbRRW-XUG7yKe1V5GH86KAOuJ4'\nconst URL1 = 'https://www.googleapis.com/youtube/v3/search'\nconst URL2 = `?key=${YOUTUBE_API_KEY}&part=snippet&safeSearch=strict&type=video&videoEmbeddable=true&maxResults=50`\n\nclass VideoSearchContainer extends Component {\n  state = {\n    videos: [],\n    searchTerm: \"\",\n    videoIndex: ''\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      videos: this.state.videos,\n      searchTerm: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    fetch(URL1 + URL2 + `&q=${this.state.searchTerm}`)\n      .then(resp => resp.json())\n      .then(json => {\n        this.setState({\n          videos: this.createVideoObjects(json.items),\n          searchTerm: \"\"\n        })\n        console.log(this.createVideoObjects(json.items))\n      })\n  }\n\n  handleVideoClick = (index) => {\n    this.setState({\n      ...this.state,\n      videos: [...this.state.videos],\n      videoIndex: index\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"searched-videos-display\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.searchTerm}\n            onChange={this.handleChange}\n            />\n          <input type=\"submit\" value=\"Search\"/>\n        </form>\n        <div className=\"search-videos-container\">\n          <DisplaySearchResults handleDragStart={this.props.handleDragStart} handleVideoClick={this.handleVideoClick} videos={this.state.videos}/>\n          {this.state.videoIndex !== \"\" ? <DisplayPreview addToProgression={this.props.addToProgression} video={this.state.videos[this.state.videoIndex]}/> : ''}\n        </div>\n      </div>\n    )\n  }\n\n  formatTitle = (unformattedTitle) => {\n    const parser = new DOMParser()\n    let title = parser.parseFromString('<!doctype html><body>' + unformattedTitle, 'text/html')\n    return title.body.textContent\n  }\n\n  formatDate = (publishedAt) => {\n    const date = new Date(publishedAt)\n    const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n    const month = MONTHS[date.getMonth()]\n    const day = date.getDate()\n    const year = date.getFullYear()\n    return `${month} ${day}, ${year}`\n  }\n\n  createVideoObjects = (videos) => {\n    return videos.map(video => {\n      const url = 'http://www.youtube.com/embed/' + video.id.videoId\n      return {\n        title: this.formatTitle(video.snippet.title),\n        videoId: video.id.videoId,\n        channelTitle: video.snippet.channelTitle,\n        description: video.snippet.description,\n        date: this.formatDate(video.snippet.publishedAt),\n        thumbnailUrl: video.snippet.thumbnails.medium.url,\n        url: url\n      }\n    })\n  }\n}\n\nexport default VideoSearchContainer\n"]},"metadata":{},"sourceType":"module"}