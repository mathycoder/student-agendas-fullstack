{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/adamsarli/Coding/student-agendas-fullstack/client/src/components/agendas/AgendaContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { fetchStudentData } from '../../actions/studentActions';\nimport MyAgenda from './MyAgenda';\nimport MyProgression from './MyProgression';\nimport { connect } from 'react-redux';\nimport './myagenda.css';\nimport { getStudentProgressions } from '../progressions/helpers/getStudentProgressions';\nimport { updateStudentProgressionStatus } from '../../actions/studentProgressionActions';\nimport StudentShowSummary from '../students/showStudentShowSummary';\n\nclass AgendaContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      initialLoad: false,\n      selectedProgressionId: null,\n      itemIndex: 0\n    };\n\n    this.handleProgressionClick = (progression, index) => {\n      this.setState(_objectSpread({}, this.state, {\n        selectedProgressionId: \"progression\".concat(progression.id),\n        itemIndex: index\n      }));\n    };\n\n    this.handleBackClick = () => {\n      const itemIndex = this.state.itemIndex;\n      this.setState(_objectSpread({}, this.state, {\n        itemIndex: itemIndex - 1\n      }));\n    };\n\n    this.handleNextClick = () => {\n      const itemIndex = this.state.itemIndex;\n      this.setState(_objectSpread({}, this.state, {\n        itemIndex: itemIndex + 1\n      }));\n    };\n\n    this.handleProgressionSubmit = progression => {\n      const _this$props = this.props,\n            updateStudentProgressionStatus = _this$props.updateStudentProgressionStatus,\n            currentUser = _this$props.currentUser;\n      updateStudentProgressionStatus(currentUser, progression, {\n        submitted: true\n      });\n      this.setState(_objectSpread({}, this.state, {\n        itemIndex: 0,\n        selectedProgressionId: null\n      }));\n    };\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          currentUser = _this$props2.currentUser,\n          fetchStudentData = _this$props2.fetchStudentData;\n\n    if (currentUser.type === \"student\") {\n      fetchStudentData(currentUser);\n    }\n  }\n\n  componentDidUpdate() {\n    const _this$props3 = this.props,\n          currentUser = _this$props3.currentUser,\n          progressions = _this$props3.progressions,\n          studentProgressions = _this$props3.studentProgressions;\n    const initialLoad = this.state.initialLoad;\n\n    if (!initialLoad && progressions.allIds.length > 0 && studentProgressions.allIds.length > 0) {\n      const progs = getStudentProgressions(currentUser, studentProgressions, progressions);\n      const firstIncomplete = progs.find(prog => !prog.submitted);\n      this.setState(_objectSpread({}, this.state, {\n        initialLoad: true,\n        selectedProgressionId: firstIncomplete ? \"progression\".concat(firstIncomplete.id) : null\n      }));\n    }\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          currentUser = _this$props4.currentUser,\n          studentProgressions = _this$props4.studentProgressions,\n          progressions = _this$props4.progressions;\n    const _this$state = this.state,\n          selectedProgressionId = _this$state.selectedProgressionId,\n          itemIndex = _this$state.itemIndex;\n    return React.createElement(\"div\", {\n      className: \"myagenda-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(MyAgenda, {\n      itemIndex: itemIndex,\n      selectedProgressionId: selectedProgressionId,\n      handleProgressionClick: this.handleProgressionClick,\n      progressions: getStudentProgressions(currentUser, studentProgressions, progressions),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(MyProgression, {\n      key: Math.random(),\n      itemIndex: itemIndex,\n      handleProgressionSubmit: this.handleProgressionSubmit,\n      handleBackClick: this.handleBackClick,\n      handleNextClick: this.handleNextClick,\n      progression: getStudentProgressions(currentUser, studentProgressions, progressions).find(prog => \"progression\".concat(prog.id) === selectedProgressionId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser,\n    studentProgressions: state.studentProgressions,\n    progressions: state.progressions\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchStudentData: student => dispatch(fetchStudentData(student)),\n    updateStudentProgressionStatus: (student, progression, status) => dispatch(updateStudentProgressionStatus(student, progression, status))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AgendaContainer);","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/components/agendas/AgendaContainer.js"],"names":["React","Component","fetchStudentData","MyAgenda","MyProgression","connect","getStudentProgressions","updateStudentProgressionStatus","StudentShowSummary","AgendaContainer","state","initialLoad","selectedProgressionId","itemIndex","handleProgressionClick","progression","index","setState","id","handleBackClick","handleNextClick","handleProgressionSubmit","props","currentUser","submitted","componentDidMount","type","componentDidUpdate","progressions","studentProgressions","allIds","length","progs","firstIncomplete","find","prog","render","Math","random","mapStateToProps","mapDispatchToProps","dispatch","student","status"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { fetchStudentData } from '../../actions/studentActions'\nimport MyAgenda from './MyAgenda'\nimport MyProgression from './MyProgression'\nimport { connect } from 'react-redux'\nimport './myagenda.css'\nimport { getStudentProgressions } from '../progressions/helpers/getStudentProgressions'\nimport { updateStudentProgressionStatus } from '../../actions/studentProgressionActions'\nimport StudentShowSummary from '../students/showStudentShowSummary'\n\n\nclass AgendaContainer extends Component {\n  state = {\n    initialLoad: false,\n    selectedProgressionId: null,\n    itemIndex: 0\n  }\n\n  componentDidMount(){\n    const { currentUser, fetchStudentData } = this.props\n    if(currentUser.type === \"student\"){\n      fetchStudentData(currentUser)\n    }\n  }\n\n  componentDidUpdate(){\n    const { currentUser, progressions, studentProgressions } = this.props\n    const { initialLoad } = this.state\n    if (!initialLoad && progressions.allIds.length > 0 && studentProgressions.allIds.length > 0){\n      const progs = getStudentProgressions(currentUser, studentProgressions, progressions)\n      const firstIncomplete = progs.find(prog => !prog.submitted)\n      this.setState({\n        ...this.state,\n        initialLoad: true,\n        selectedProgressionId: firstIncomplete ? `progression${firstIncomplete.id}` : null\n      })\n    }\n  }\n\n  handleProgressionClick = (progression, index) => {\n    this.setState({\n      ...this.state,\n      selectedProgressionId: `progression${progression.id}`,\n      itemIndex: index\n    })\n  }\n\n  handleBackClick = () => {\n    const { itemIndex } = this.state\n    this.setState({\n      ...this.state,\n      itemIndex: itemIndex - 1\n    })\n  }\n\n  handleNextClick = () => {\n    const { itemIndex } = this.state\n    this.setState({\n      ...this.state,\n      itemIndex: itemIndex + 1\n    })\n  }\n\n  handleProgressionSubmit = (progression) => {\n    const { updateStudentProgressionStatus, currentUser } = this.props\n    updateStudentProgressionStatus(currentUser, progression, {submitted: true})\n    this.setState({\n      ...this.state,\n      itemIndex: 0,\n      selectedProgressionId: null,\n    })\n  }\n\n  render(){\n    const { currentUser, studentProgressions, progressions } = this.props\n    const { selectedProgressionId, itemIndex } = this.state\n    return (\n      <div className=\"myagenda-wrapper\">\n        <MyAgenda\n          itemIndex={itemIndex}\n          selectedProgressionId={selectedProgressionId}\n          handleProgressionClick={this.handleProgressionClick}\n          progressions={getStudentProgressions(currentUser, studentProgressions, progressions)}/>\n        <MyProgression\n          key={Math.random()}\n          itemIndex={itemIndex}\n          handleProgressionSubmit={this.handleProgressionSubmit}\n          handleBackClick={this.handleBackClick}\n          handleNextClick={this.handleNextClick}\n          progression={getStudentProgressions(currentUser, studentProgressions, progressions).find(prog => `progression${prog.id}` === selectedProgressionId)} />\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    currentUser: state.currentUser,\n    studentProgressions: state.studentProgressions,\n    progressions: state.progressions\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    fetchStudentData: (student) => dispatch(fetchStudentData(student)),\n    updateStudentProgressionStatus: (student, progression, status) => dispatch(updateStudentProgressionStatus(student, progression, status))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AgendaContainer)\n"]},"metadata":{},"sourceType":"module"}