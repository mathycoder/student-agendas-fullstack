{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nconst youTubeReducer = combineReducers({\n  videos: youTubeVideos,\n  static: youTubeStatic\n});\nconst vimeoReducer = combineReducers({\n  videos: vimeoVideos,\n  static: vimeoStatic\n});\nconst videoSearchReducer = combineReducers({\n  youTube: youTubeReducer,\n  vimeo: vimeoReducer\n});\nexport default videoSearchReducer;\n\nfunction youTubeVideos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_YOUTUBE_VIDEOS':\n      return [...createYouTubeVideoObjects(action.videos.items)];\n\n    default:\n      return state;\n  }\n}\n\nfunction youTubeStatic(state = {}, action) {\n  switch (action.type) {\n    case 'START_YOUTUBE_SEARCH_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction vimeoVideos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_VIMEO_VIDEOS':\n      return [...createVimeoVideoObjects(action.videos.data)];\n\n    default:\n      return state;\n  }\n}\n\nfunction vimeoStatic(state = {\n  searchTerm: null\n}, action) {\n  switch (action.type) {\n    case 'START_VIMEO_SEARCH_REQUEST':\n      debugger;\n      return _objectSpread({}, state, {\n        searchTerm: action.query\n      });\n\n    case 'ADD_VIMEO_VIDEOS':\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction formatTitle(unformattedTitle) {\n  const parser = new DOMParser();\n  let title = parser.parseFromString('<!doctype html><body>' + unformattedTitle, 'text/html');\n  return title.body.textContent;\n}\n\nfunction formatDate(publishedAt) {\n  const date = new Date(publishedAt);\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = MONTHS[date.getMonth()];\n  const day = date.getDate();\n  const year = date.getFullYear();\n  return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n}\n\nfunction createVimeoVideoObjects(videos) {\n  const myVideos = videos.map(video => {\n    if (video.privacy.embed !== \"private\") {\n      return {\n        title: video.name,\n        videoId: video.uri.split('/')[2],\n        channelTitle: video.user.name,\n        description: video.description,\n        date: formatDate(video.created_time),\n        thumbnailUrl: video.pictures.sizes[1].link,\n        url: video.embed.html.match(/https[^\\s\"]+/)[0]\n      };\n    } else {\n      return null;\n    }\n  });\n  return myVideos.filter(video => video !== null);\n}\n\nfunction createYouTubeVideoObjects(videos) {\n  return videos.map(video => {\n    const url = 'http://www.youtube.com/embed/' + video.id.videoId;\n    return {\n      title: formatTitle(video.snippet.title),\n      videoId: video.id.videoId,\n      channelTitle: video.snippet.channelTitle,\n      description: video.snippet.description,\n      date: formatDate(video.snippet.publishedAt),\n      thumbnailUrl: video.snippet.thumbnails.medium.url,\n      url: url\n    };\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/videoSearchReducer.js"],"names":["combineReducers","youTubeReducer","videos","youTubeVideos","static","youTubeStatic","vimeoReducer","vimeoVideos","vimeoStatic","videoSearchReducer","youTube","vimeo","state","action","type","createYouTubeVideoObjects","items","createVimeoVideoObjects","data","searchTerm","query","formatTitle","unformattedTitle","parser","DOMParser","title","parseFromString","body","textContent","formatDate","publishedAt","date","Date","MONTHS","month","getMonth","day","getDate","year","getFullYear","myVideos","map","video","privacy","embed","name","videoId","uri","split","channelTitle","user","description","created_time","thumbnailUrl","pictures","sizes","link","url","html","match","filter","id","snippet","thumbnails","medium"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\nconst youTubeReducer = combineReducers({\n  videos: youTubeVideos,\n  static: youTubeStatic\n})\n\nconst vimeoReducer = combineReducers({\n  videos: vimeoVideos,\n  static: vimeoStatic\n})\n\nconst videoSearchReducer = combineReducers({\n  youTube: youTubeReducer,\n  vimeo: vimeoReducer\n})\n\nexport default videoSearchReducer\n\nfunction youTubeVideos(state = [], action) {\n  switch(action.type) {\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return [\n        ...createYouTubeVideoObjects(action.videos.items)\n      ]\n\n    default:\n      return state\n  }\n}\n\nfunction youTubeStatic(state = {}, action) {\n  switch(action.type) {\n    case 'START_YOUTUBE_SEARCH_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return {\n        ...state\n      }\n\n    default:\n      return state\n  }\n}\n\nfunction vimeoVideos(state = [], action) {\n  switch(action.type) {\n\n    case 'ADD_VIMEO_VIDEOS':\n      return [\n        ...createVimeoVideoObjects(action.videos.data)\n      ]\n\n    default:\n      return state\n  }\n}\n\nfunction vimeoStatic(state = {searchTerm: null}, action) {\n  switch(action.type) {\n\n    case 'START_VIMEO_SEARCH_REQUEST':\n    debugger\n      return {\n        ...state,\n        searchTerm: action.query\n      }\n\n      case 'ADD_VIMEO_VIDEOS':\n        return {\n          ...state\n        }\n\n    default:\n      return state\n  }\n}\n\n\n\nfunction formatTitle(unformattedTitle){\n  const parser = new DOMParser()\n  let title = parser.parseFromString('<!doctype html><body>' + unformattedTitle, 'text/html')\n  return title.body.textContent\n}\n\nfunction formatDate(publishedAt){\n  const date = new Date(publishedAt)\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n  const month = MONTHS[date.getMonth()]\n  const day = date.getDate()\n  const year = date.getFullYear()\n  return `${month} ${day}, ${year}`\n}\n\nfunction createVimeoVideoObjects(videos){\n  const myVideos = videos.map(video => {\n    if (video.privacy.embed !== \"private\") {\n      return {\n        title: video.name,\n        videoId: video.uri.split('/')[2],\n        channelTitle: video.user.name,\n        description: video.description,\n        date: formatDate(video.created_time),\n        thumbnailUrl: video.pictures.sizes[1].link,\n        url: video.embed.html.match(/https[^\\s\"]+/)[0]\n      }\n    } else {\n      return null\n    }\n  })\n  return myVideos.filter(video => video !== null)\n}\n\nfunction createYouTubeVideoObjects(videos){\n  return videos.map(video => {\n    const url = 'http://www.youtube.com/embed/' + video.id.videoId\n    return {\n      title: formatTitle(video.snippet.title),\n      videoId: video.id.videoId,\n      channelTitle: video.snippet.channelTitle,\n      description: video.snippet.description,\n      date: formatDate(video.snippet.publishedAt),\n      thumbnailUrl: video.snippet.thumbnails.medium.url,\n      url: url\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}