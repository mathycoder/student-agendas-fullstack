{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nconst getStudentProgressions = (student, props) => {\n  const _this$props = this.props,\n        studentProgressions = _this$props.studentProgressions,\n        progressions = _this$props.progressions;\n\n  if (progressions.allIds.length > 0) {\n    const myStudentProgressionIds = studentProgressions.allIds.filter(spId => {\n      const studentProgression = studentProgressions.byId[spId];\n      return studentProgression.studentId === \"student\".concat(student.id);\n    });\n    const myStudentProgressions = myStudentProgressionIds.map(stPrId => {\n      return studentProgressions.byId[stPrId];\n    });\n    const myOrderedStudentProgressions = myStudentProgressions.sort((a, b) => a.agendaIndex - b.agendaIndex);\n    const myProgressions = myOrderedStudentProgressions.map(sp => {\n      const prog = _objectSpread({}, progressions.byId[sp.progressionId]);\n\n      prog.submitted = sp.submitted;\n      prog.createdAt = this.formatDate(sp.createdAt);\n      prog.updatedAt = this.formatDate(sp.updatedAt);\n      prog.question1Answer = sp.question1Answer;\n      return prog;\n    });\n    debugger;\n    return myProgressions;\n  } else {\n    return [];\n  }\n};\n\nconst formatDate = rawDate => {\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(rawDate);\n  return \"\".concat(monthNames[date.getMonth()], \" \").concat(date.getDate(), \", \").concat(date.getFullYear());\n};\n\nfunction mapStateToProps(state) {\n  return {\n    studentProgressions: state.studentProgressions,\n    progressions: state.progressions\n  };\n}\n\nexport default connect(mapStateToProps, null)(getStudentProgressions);","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/components/progressions/helpers/getStudentProgressions.js"],"names":["React","connect","getStudentProgressions","student","props","studentProgressions","progressions","allIds","length","myStudentProgressionIds","filter","spId","studentProgression","byId","studentId","id","myStudentProgressions","map","stPrId","myOrderedStudentProgressions","sort","a","b","agendaIndex","myProgressions","sp","prog","progressionId","submitted","createdAt","formatDate","updatedAt","question1Answer","rawDate","monthNames","date","Date","getMonth","getDate","getFullYear","mapStateToProps","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAAA,sBACH,KAAKA,KADF;AAAA,QACzCC,mBADyC,eACzCA,mBADyC;AAAA,QACpBC,YADoB,eACpBA,YADoB;;AAEjD,MAAIA,YAAY,CAACC,MAAb,CAAoBC,MAApB,GAA6B,CAAjC,EAAmC;AACjC,UAAMC,uBAAuB,GAAGJ,mBAAmB,CAACE,MAApB,CAA2BG,MAA3B,CAAkCC,IAAI,IAAI;AACxE,YAAMC,kBAAkB,GAAGP,mBAAmB,CAACQ,IAApB,CAAyBF,IAAzB,CAA3B;AACA,aAAOC,kBAAkB,CAACE,SAAnB,sBAA2CX,OAAO,CAACY,EAAnD,CAAP;AACD,KAH+B,CAAhC;AAIA,UAAMC,qBAAqB,GAAGP,uBAAuB,CAACQ,GAAxB,CAA4BC,MAAM,IAAI;AAClE,aAAOb,mBAAmB,CAACQ,IAApB,CAAyBK,MAAzB,CAAP;AACD,KAF6B,CAA9B;AAGA,UAAMC,4BAA4B,GAAGH,qBAAqB,CAACI,IAAtB,CAA2B,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtD,CAArC;AACA,UAAMC,cAAc,GAAGL,4BAA4B,CAACF,GAA7B,CAAiCQ,EAAE,IAAI;AAC5D,YAAMC,IAAI,qBAAOpB,YAAY,CAACO,IAAb,CAAkBY,EAAE,CAACE,aAArB,CAAP,CAAV;;AACAD,MAAAA,IAAI,CAACE,SAAL,GAAiBH,EAAE,CAACG,SAApB;AACAF,MAAAA,IAAI,CAACG,SAAL,GAAiB,KAAKC,UAAL,CAAgBL,EAAE,CAACI,SAAnB,CAAjB;AACAH,MAAAA,IAAI,CAACK,SAAL,GAAiB,KAAKD,UAAL,CAAgBL,EAAE,CAACM,SAAnB,CAAjB;AACAL,MAAAA,IAAI,CAACM,eAAL,GAAuBP,EAAE,CAACO,eAA1B;AACA,aAAON,IAAP;AACD,KAPsB,CAAvB;AAQA;AACA,WAAOF,cAAP;AACD,GAnBD,MAmBO;AACL,WAAO,EAAP;AACD;AACF,CAxBD;;AA0BA,MAAMM,UAAU,GAAIG,OAAD,IAAa;AAC9B,QAAMC,UAAU,GAAG,CACnB,KADmB,EACZ,KADY,EACL,KADK,EAEnB,KAFmB,EAEZ,KAFY,EAEL,KAFK,EAEE,KAFF,EAGnB,KAHmB,EAGZ,KAHY,EAGL,KAHK,EAInB,KAJmB,EAIZ,KAJY,CAAnB;AAKA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASH,OAAT,CAAb;AACA,mBAAUC,UAAU,CAACC,IAAI,CAACE,QAAL,EAAD,CAApB,cAAyCF,IAAI,CAACG,OAAL,EAAzC,eAA4DH,IAAI,CAACI,WAAL,EAA5D;AACD,CARD;;AAUA,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC7B,SAAO;AACLpC,IAAAA,mBAAmB,EAAEoC,KAAK,CAACpC,mBADtB;AAELC,IAAAA,YAAY,EAAEmC,KAAK,CAACnC;AAFf,GAAP;AAID;;AAED,eAAeL,OAAO,CAACuC,eAAD,EAAkB,IAAlB,CAAP,CAA+BtC,sBAA/B,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nconst getStudentProgressions = (student, props) => {\n  const { studentProgressions, progressions } = this.props\n  if (progressions.allIds.length > 0){\n    const myStudentProgressionIds = studentProgressions.allIds.filter(spId => {\n      const studentProgression = studentProgressions.byId[spId]\n      return studentProgression.studentId === `student${student.id}`\n    })\n    const myStudentProgressions = myStudentProgressionIds.map(stPrId => {\n      return studentProgressions.byId[stPrId]\n    })\n    const myOrderedStudentProgressions = myStudentProgressions.sort((a,b) => a.agendaIndex - b.agendaIndex)\n    const myProgressions = myOrderedStudentProgressions.map(sp => {\n      const prog = {...progressions.byId[sp.progressionId]}\n      prog.submitted = sp.submitted\n      prog.createdAt = this.formatDate(sp.createdAt)\n      prog.updatedAt = this.formatDate(sp.updatedAt)\n      prog.question1Answer = sp.question1Answer\n      return prog\n    })\n    debugger\n    return myProgressions\n  } else {\n    return []\n  }\n}\n\nconst formatDate = (rawDate) => {\n  const monthNames = [\n  \"Jan\", \"Feb\", \"Mar\",\n  \"Apr\", \"May\", \"Jun\", \"Jul\",\n  \"Aug\", \"Sep\", \"Oct\",\n  \"Nov\", \"Dec\"]\n  const date = new Date(rawDate)\n  return `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n}\n\nfunction mapStateToProps(state){\n  return {\n    studentProgressions: state.studentProgressions,\n    progressions: state.progressions\n  }\n}\n\nexport default connect(mapStateToProps, null)(getStudentProgressions)\n"]},"metadata":{},"sourceType":"module"}