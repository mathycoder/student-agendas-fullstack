{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const getStudentProgressions = (student, studentProgressions, progressions) => {\n  if (progressions.allIds.length > 0) {\n    const myStudentProgressionIds = studentProgressions.allIds.filter(spId => {\n      const studentProgression = studentProgressions.byId[spId];\n      return studentProgression.studentId === \"student\".concat(student.id);\n    });\n    const myStudentProgressions = myStudentProgressionIds.map(stPrId => {\n      return studentProgressions.byId[stPrId];\n    });\n    const myOrderedStudentProgressions = myStudentProgressions.sort((a, b) => a.agendaIndex - b.agendaIndex);\n    const myProgressions = myOrderedStudentProgressions.map(sp => {\n      const prog = _objectSpread({}, progressions.byId[sp.progressionId]);\n\n      prog.submitted = sp.submitted;\n      prog.graded = sp.graded;\n      prog.gradedAt = formatDate(sp.gradedAt);\n      prog.submittedAt = formatDate(sp.submittedAt);\n      prog.createdAt = formatDate(sp.createdAt);\n      prog.question1Answer = sp.question1Answer;\n      prog.question1Comment = sp.question1Comment;\n      prog.studentProgressionId = \"studentProgression\".concat(sp.id);\n      prog.archived = sp.archived;\n      return prog;\n    });\n    return myProgressions;\n  } else {\n    return [];\n  }\n};\nexport const getActiveStudentProgressions = (student, studentProgressions, progressions) => {\n  const allSps = getStudentProgressions(student, studentProgressions, progressions);\n  return allSps.filter(sp => !sp.archived);\n};\nexport const getSubmittedStudentProgressions = (student, studentProgressions, progressions) => {\n  const allSps = getStudentProgressions(student, studentProgressions, progressions);\n  return allSps.filter(sp => sp.archived);\n};\n\nconst formatDate = rawDate => {\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  if (rawDate) {\n    const date = new Date(rawDate);\n    return \"\".concat(monthNames[date.getMonth()], \" \").concat(date.getDate(), \", \").concat(date.getFullYear());\n  } else {\n    return 'incomplete';\n  }\n};\n\nexport const getAllSubmittedProgressions = (students, studentProgressions, progressions) => {\n  const allProgressions = [];\n  students.allIds.forEach(studentId => {\n    const student = students.byId[studentId];\n    allProgressions.concat(getSubmittedStudentProgressions(student, studentProgressions, progressions));\n  });\n};","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/components/progressions/helpers/getStudentProgressions.js"],"names":["getStudentProgressions","student","studentProgressions","progressions","allIds","length","myStudentProgressionIds","filter","spId","studentProgression","byId","studentId","id","myStudentProgressions","map","stPrId","myOrderedStudentProgressions","sort","a","b","agendaIndex","myProgressions","sp","prog","progressionId","submitted","graded","gradedAt","formatDate","submittedAt","createdAt","question1Answer","question1Comment","studentProgressionId","archived","getActiveStudentProgressions","allSps","getSubmittedStudentProgressions","rawDate","monthNames","date","Date","getMonth","getDate","getFullYear","getAllSubmittedProgressions","students","allProgressions","forEach","concat"],"mappings":";;;;;;AAAA,OAAO,MAAMA,sBAAsB,GAAG,CAACC,OAAD,EAAUC,mBAAV,EAA+BC,YAA/B,KAAgD;AACpF,MAAIA,YAAY,CAACC,MAAb,CAAoBC,MAApB,GAA6B,CAAjC,EAAmC;AACjC,UAAMC,uBAAuB,GAAGJ,mBAAmB,CAACE,MAApB,CAA2BG,MAA3B,CAAkCC,IAAI,IAAI;AACxE,YAAMC,kBAAkB,GAAGP,mBAAmB,CAACQ,IAApB,CAAyBF,IAAzB,CAA3B;AACA,aAAOC,kBAAkB,CAACE,SAAnB,sBAA2CV,OAAO,CAACW,EAAnD,CAAP;AACD,KAH+B,CAAhC;AAIA,UAAMC,qBAAqB,GAAGP,uBAAuB,CAACQ,GAAxB,CAA4BC,MAAM,IAAI;AAClE,aAAOb,mBAAmB,CAACQ,IAApB,CAAyBK,MAAzB,CAAP;AACD,KAF6B,CAA9B;AAGA,UAAMC,4BAA4B,GAAGH,qBAAqB,CAACI,IAAtB,CAA2B,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtD,CAArC;AACA,UAAMC,cAAc,GAAGL,4BAA4B,CAACF,GAA7B,CAAiCQ,EAAE,IAAI;AAC5D,YAAMC,IAAI,qBAAOpB,YAAY,CAACO,IAAb,CAAkBY,EAAE,CAACE,aAArB,CAAP,CAAV;;AACAD,MAAAA,IAAI,CAACE,SAAL,GAAiBH,EAAE,CAACG,SAApB;AACAF,MAAAA,IAAI,CAACG,MAAL,GAAcJ,EAAE,CAACI,MAAjB;AACAH,MAAAA,IAAI,CAACI,QAAL,GAAgBC,UAAU,CAACN,EAAE,CAACK,QAAJ,CAA1B;AACAJ,MAAAA,IAAI,CAACM,WAAL,GAAmBD,UAAU,CAACN,EAAE,CAACO,WAAJ,CAA7B;AACAN,MAAAA,IAAI,CAACO,SAAL,GAAiBF,UAAU,CAACN,EAAE,CAACQ,SAAJ,CAA3B;AACAP,MAAAA,IAAI,CAACQ,eAAL,GAAuBT,EAAE,CAACS,eAA1B;AACAR,MAAAA,IAAI,CAACS,gBAAL,GAAwBV,EAAE,CAACU,gBAA3B;AACAT,MAAAA,IAAI,CAACU,oBAAL,+BAAiDX,EAAE,CAACV,EAApD;AACAW,MAAAA,IAAI,CAACW,QAAL,GAAgBZ,EAAE,CAACY,QAAnB;AACA,aAAOX,IAAP;AACD,KAZsB,CAAvB;AAaA,WAAOF,cAAP;AACD,GAvBD,MAuBO;AACL,WAAO,EAAP;AACD;AACF,CA3BM;AA6BP,OAAO,MAAMc,4BAA4B,GAAG,CAAClC,OAAD,EAAUC,mBAAV,EAA+BC,YAA/B,KAAgD;AAC1F,QAAMiC,MAAM,GAAGpC,sBAAsB,CAACC,OAAD,EAAUC,mBAAV,EAA+BC,YAA/B,CAArC;AACA,SAAOiC,MAAM,CAAC7B,MAAP,CAAce,EAAE,IAAI,CAACA,EAAE,CAACY,QAAxB,CAAP;AACD,CAHM;AAKP,OAAO,MAAMG,+BAA+B,GAAG,CAACpC,OAAD,EAAUC,mBAAV,EAA+BC,YAA/B,KAAgD;AAC7F,QAAMiC,MAAM,GAAGpC,sBAAsB,CAACC,OAAD,EAAUC,mBAAV,EAA+BC,YAA/B,CAArC;AACA,SAAOiC,MAAM,CAAC7B,MAAP,CAAce,EAAE,IAAIA,EAAE,CAACY,QAAvB,CAAP;AACD,CAHM;;AAKP,MAAMN,UAAU,GAAIU,OAAD,IAAa;AAC9B,QAAMC,UAAU,GAAG,CACnB,KADmB,EACZ,KADY,EACL,KADK,EAEnB,KAFmB,EAEZ,KAFY,EAEL,KAFK,EAEE,KAFF,EAGnB,KAHmB,EAGZ,KAHY,EAGL,KAHK,EAInB,KAJmB,EAIZ,KAJY,CAAnB;;AAKA,MAAID,OAAJ,EAAa;AACX,UAAME,IAAI,GAAG,IAAIC,IAAJ,CAASH,OAAT,CAAb;AACA,qBAAUC,UAAU,CAACC,IAAI,CAACE,QAAL,EAAD,CAApB,cAAyCF,IAAI,CAACG,OAAL,EAAzC,eAA4DH,IAAI,CAACI,WAAL,EAA5D;AACD,GAHD,MAGO;AACL,WAAO,YAAP;AACD;AACF,CAZD;;AAcA,OAAO,MAAMC,2BAA2B,GAAG,CAACC,QAAD,EAAW5C,mBAAX,EAAgCC,YAAhC,KAAiD;AAC1F,QAAM4C,eAAe,GAAG,EAAxB;AACAD,EAAAA,QAAQ,CAAC1C,MAAT,CAAgB4C,OAAhB,CAAwBrC,SAAS,IAAI;AACnC,UAAMV,OAAO,GAAG6C,QAAQ,CAACpC,IAAT,CAAcC,SAAd,CAAhB;AACAoC,IAAAA,eAAe,CAACE,MAAhB,CAAuBZ,+BAA+B,CAACpC,OAAD,EAAUC,mBAAV,EAA+BC,YAA/B,CAAtD;AACD,GAHD;AAID,CANM","sourcesContent":["export const getStudentProgressions = (student, studentProgressions, progressions) => {\n  if (progressions.allIds.length > 0){\n    const myStudentProgressionIds = studentProgressions.allIds.filter(spId => {\n      const studentProgression = studentProgressions.byId[spId]\n      return studentProgression.studentId === `student${student.id}`\n    })\n    const myStudentProgressions = myStudentProgressionIds.map(stPrId => {\n      return studentProgressions.byId[stPrId]\n    })\n    const myOrderedStudentProgressions = myStudentProgressions.sort((a,b) => a.agendaIndex - b.agendaIndex)\n    const myProgressions = myOrderedStudentProgressions.map(sp => {\n      const prog = {...progressions.byId[sp.progressionId]}\n      prog.submitted = sp.submitted\n      prog.graded = sp.graded\n      prog.gradedAt = formatDate(sp.gradedAt)\n      prog.submittedAt = formatDate(sp.submittedAt)\n      prog.createdAt = formatDate(sp.createdAt)\n      prog.question1Answer = sp.question1Answer\n      prog.question1Comment = sp.question1Comment\n      prog.studentProgressionId = `studentProgression${sp.id}`\n      prog.archived = sp.archived\n      return prog\n    })\n    return myProgressions\n  } else {\n    return []\n  }\n}\n\nexport const getActiveStudentProgressions = (student, studentProgressions, progressions) => {\n  const allSps = getStudentProgressions(student, studentProgressions, progressions)\n  return allSps.filter(sp => !sp.archived)\n}\n\nexport const getSubmittedStudentProgressions = (student, studentProgressions, progressions) => {\n  const allSps = getStudentProgressions(student, studentProgressions, progressions)\n  return allSps.filter(sp => sp.archived)\n}\n\nconst formatDate = (rawDate) => {\n  const monthNames = [\n  \"Jan\", \"Feb\", \"Mar\",\n  \"Apr\", \"May\", \"Jun\", \"Jul\",\n  \"Aug\", \"Sep\", \"Oct\",\n  \"Nov\", \"Dec\"]\n  if (rawDate) {\n    const date = new Date(rawDate)\n    return `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n  } else {\n    return 'incomplete'\n  }\n}\n\nexport const getAllSubmittedProgressions = (students, studentProgressions, progressions) => {\n  const allProgressions = []\n  students.allIds.forEach(studentId => {\n    const student = students.byId[studentId]\n    allProgressions.concat(getSubmittedStudentProgressions(student, studentProgressions, progressions))\n  })\n}\n"]},"metadata":{},"sourceType":"module"}