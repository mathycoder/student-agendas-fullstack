{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/adamsarli/Coding/student-agendas-fullstack/client/src/components/students/show/StudentShowSummary.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport StudentProgression from '../StudentProgression';\nimport PostItForm from './PostItForm';\nimport { connect } from 'react-redux';\nimport { updateStudentProgressionStatus } from '../../../actions/studentProgressionActions';\nimport '../css/student-summary.css';\n\nclass StudentShowSummary extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progression: null,\n      studentProgressionId: null,\n      editing: false\n    };\n\n    this.handleEditClick = (e, progression) => {\n      e.preventDefault();\n      this.setState(_objectSpread({}, this.state, {\n        editing: true,\n        studentProgressionId: progression.studentProgressionId,\n        progression: progression\n      }));\n    };\n\n    this.handleEditSubmit = (e, attributes) => {\n      const progression = this.state.progression;\n      const _this$props = this.props,\n            student = _this$props.student,\n            progressions = _this$props.progressions,\n            updateStudentProgressionStatus = _this$props.updateStudentProgressionStatus;\n      debugger;\n      updateStudentProgressionStatus(student, progression, attributes);\n      this.setState(_objectSpread({}, this.state, {\n        editing: false,\n        studentProgressionId: undefined\n      }));\n    };\n\n    this.renderProgressionRow = (progression, index) => {\n      const _this$props2 = this.props,\n            student = _this$props2.student,\n            myAgenda = _this$props2.myAgenda;\n      const _this$state = this.state,\n            editing = _this$state.editing,\n            studentProgressionId = _this$state.studentProgressionId;\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"progression-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"summary-progression\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(StudentProgression, {\n        progression: progression,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"summary-dates\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"date-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Assigned: \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, progression.createdAt), \" \"), React.createElement(\"div\", {\n        className: \"date-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Completed: \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), \" \", React.createElement(\"div\", {\n        className: \"\".concat(progression.submittedAt === 'incomplete' ? 'incomplete' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, progression.submittedAt))))), React.createElement(\"div\", {\n        className: \"summary-reflection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.renderReflection(progression).question1)), React.createElement(\"div\", {\n        className: \"summary-reflection-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"answer-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, student.firstName, \"s Response: \"), progression.question1Answer ? \"\\\"\".concat(progression.question1Answer, \"\\\"\") : React.createElement(\"span\", {\n        className: \"incomplete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"incomplete\"))), React.createElement(\"div\", {\n        className: \"summary-reflection-comment \".concat(editing && progression.studentProgressionId === studentProgressionId ? '' : 'post-it'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, editing && progression.studentProgressionId === studentProgressionId ? React.createElement(PostItForm, {\n        comment: progression.question1Comment,\n        handleEditSubmit: this.handleEditSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, progression.question1Comment, !editing && progression.submitted && !myAgenda ? React.createElement(\"button\", {\n        className: \"edit-comment-button\",\n        onClick: e => this.handleEditClick(e, progression),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, progression.question1Comment ? 'Edit' : 'Add Feedback') : '')));\n    };\n\n    this.sortedProgs = progressions => {\n      return progressions.sort((a, b) => {\n        const dateA = new Date(a.createdAt);\n        const dateB = new Date(b.createdAt);\n        return dateB - dateA;\n      });\n    };\n\n    this.renderReflection = progression => {\n      const reflections = this.props.reflections;\n      const reflectionIndex = progression.items.findIndex(item => item.includes(\"reflection\"));\n      const reflectionId = progression.items[reflectionIndex];\n      return reflections.byId[reflectionId];\n    };\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          student = _this$props3.student,\n          progressions = _this$props3.progressions,\n          currentUser = _this$props3.currentUser;\n    return React.createElement(\"div\", {\n      className: \"student-summary-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"title-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"All Progressions\")), React.createElement(\"div\", {\n      className: \"student-summary-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.sortedProgs(progressions).map((progression, index) => {\n      return this.renderProgressionRow(progression, index);\n    })));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateStudentProgressionStatus: (student, progression, status) => dispatch(updateStudentProgressionStatus(student, progression, status))\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(StudentShowSummary);","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/components/students/show/StudentShowSummary.js"],"names":["React","Component","StudentProgression","PostItForm","connect","updateStudentProgressionStatus","StudentShowSummary","state","progression","studentProgressionId","editing","handleEditClick","e","preventDefault","setState","handleEditSubmit","attributes","props","student","progressions","undefined","renderProgressionRow","index","myAgenda","createdAt","submittedAt","renderReflection","question1","firstName","question1Answer","question1Comment","submitted","sortedProgs","sort","a","b","dateA","Date","dateB","reflections","reflectionIndex","items","findIndex","item","includes","reflectionId","byId","render","currentUser","map","mapDispatchToProps","dispatch","status"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport StudentProgression from '../StudentProgression'\nimport PostItForm from './PostItForm'\nimport { connect } from 'react-redux'\nimport { updateStudentProgressionStatus } from '../../../actions/studentProgressionActions'\nimport '../css/student-summary.css'\n\nclass StudentShowSummary extends Component {\n  state = {\n    progression: null,\n    studentProgressionId: null,\n    editing: false\n  }\n\n  handleEditClick = (e, progression) => {\n    e.preventDefault()\n    this.setState({\n      ...this.state,\n      editing: true,\n      studentProgressionId: progression.studentProgressionId,\n      progression: progression\n    })\n  }\n\n  handleEditSubmit = (e, attributes) => {\n    const { progression } = this.state\n    const { student, progressions, updateStudentProgressionStatus} = this.props\n    debugger\n    updateStudentProgressionStatus(student, progression, attributes)\n    this.setState({\n      ...this.state,\n      editing: false,\n      studentProgressionId: undefined\n    })\n  }\n\n  renderProgressionRow = (progression, index) => {\n    const { student, myAgenda } = this.props\n    const { editing, studentProgressionId } = this.state\n    return (\n      <div key={index} className=\"progression-row\">\n        <div className=\"summary-progression\">\n          <StudentProgression progression={progression}/>\n          <div className=\"summary-dates\">\n            <div className=\"date-category\">Assigned: <br/><strong>{progression.createdAt}</strong> </div>\n            <div className=\"date-category\">\n              Completed: <br/> <div className={`${progression.submittedAt === 'incomplete' ? 'incomplete' : ''}`}><strong>{progression.submittedAt}</strong></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"summary-reflection\">\n          <p>{this.renderReflection(progression).question1}</p>\n        </div>\n        <div className=\"summary-reflection-answer\">\n          <p><div className=\"answer-title\">{student.firstName}s Response: </div>{progression.question1Answer ? `\"${progression.question1Answer}\"` : <span className=\"incomplete\">incomplete</span>}</p>\n        </div>\n        <div className={`summary-reflection-comment ${editing && progression.studentProgressionId === studentProgressionId ? '' : 'post-it'}`}>\n          {editing && progression.studentProgressionId === studentProgressionId ?\n            <PostItForm\n              comment={progression.question1Comment}\n              handleEditSubmit={this.handleEditSubmit}/>\n            : <p>{progression.question1Comment}{!editing && progression.submitted && !myAgenda ? <button className=\"edit-comment-button\" onClick={e => this.handleEditClick(e, progression)}>{progression.question1Comment ? 'Edit' : 'Add Feedback'}</button> : ''}</p>}\n        </div>\n      </div>\n    )\n  }\n\n  sortedProgs = (progressions) => {\n    return progressions.sort((a,b) => {\n      const dateA = new Date(a.createdAt)\n      const dateB = new Date(b.createdAt)\n      return dateB - dateA\n    })\n  }\n\n  renderReflection = (progression) => {\n    const { reflections } = this.props\n    const reflectionIndex = progression.items.findIndex(item => item.includes(\"reflection\"))\n    const reflectionId = progression.items[reflectionIndex]\n    return reflections.byId[reflectionId]\n  }\n\n  render(){\n    const { student, progressions, currentUser } = this.props\n    return (\n      <div className=\"student-summary-wrapper\">\n        <div className=\"title-heading\">\n          <h2>All Progressions</h2>\n        </div>\n        <div className=\"student-summary-page\">\n          {this.sortedProgs(progressions).map((progression, index) => {\n            return this.renderProgressionRow(progression, index)\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    updateStudentProgressionStatus: (student, progression, status) => dispatch(updateStudentProgressionStatus(student, progression, status))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(StudentShowSummary)\n"]},"metadata":{},"sourceType":"module"}