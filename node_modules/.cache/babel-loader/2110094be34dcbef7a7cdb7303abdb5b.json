{"ast":null,"code":"function videoSearchReducer(state = [], action) {\n  switch (action.type) {\n    case 'START_ADDING_VIDEOS_REQUEST':\n      return [...state];\n\n    case 'START_YOUTUBE_SEARCH_REQUEST':\n      return [...state];\n\n    case 'ADD_VIMEO_VIDEOS':\n      debugger;\n      return [...createVimeoVideoObjects(action.videos.data)];\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return [...state];\n\n    default:\n      return state;\n  }\n}\n\nexport default videoSearchReducer;\n\nfunction formatDate(publishedAt) {\n  const date = new Date(publishedAt);\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = MONTHS[date.getMonth()];\n  const day = date.getDate();\n  const year = date.getFullYear();\n  return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n}\n\nfunction createVimeoVideoObjects(videos) {\n  return videos.map(video => {\n    return {\n      title: video.name,\n      videoId: video.uri.split('/')[2],\n      channelTitle: video.user.name,\n      description: video.description,\n      date: formatDate(video.created_time),\n      thumbnailUrl: video.pictures.sizes[1].link,\n      url: video.embed.html.match(/https[^\\s\"]+/)[0]\n    };\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/videoSearchReducer.js"],"names":["videoSearchReducer","state","action","type","createVimeoVideoObjects","videos","data","formatDate","publishedAt","date","Date","MONTHS","month","getMonth","day","getDate","year","getFullYear","map","video","title","name","videoId","uri","split","channelTitle","user","description","created_time","thumbnailUrl","pictures","sizes","link","url","embed","html","match"],"mappings":"AAAA,SAASA,kBAAT,CAA4BC,KAAK,GAAG,EAApC,EAAwCC,MAAxC,EAAgD;AAC9C,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAK,6BAAL;AACE,aAAO,CACL,GAAGF,KADE,CAAP;;AAIF,SAAK,8BAAL;AACE,aAAO,CACL,GAAGA,KADE,CAAP;;AAIF,SAAK,kBAAL;AACE;AACA,aAAO,CACL,GAAGG,uBAAuB,CAACF,MAAM,CAACG,MAAP,CAAcC,IAAf,CADrB,CAAP;;AAIF,SAAK,oBAAL;AACE,aAAO,CACL,GAAGL,KADE,CAAP;;AAIF;AACE,aAAOA,KAAP;AAxBJ;AA0BD;;AAED,eAAeD,kBAAf;;AAEA,SAASO,UAAT,CAAoBC,WAApB,EAAgC;AAC9B,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,WAAT,CAAb;AACA,QAAMG,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,MAAzD,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,KAA/E,CAAf;AACA,QAAMC,KAAK,GAAGD,MAAM,CAACF,IAAI,CAACI,QAAL,EAAD,CAApB;AACA,QAAMC,GAAG,GAAGL,IAAI,CAACM,OAAL,EAAZ;AACA,QAAMC,IAAI,GAAGP,IAAI,CAACQ,WAAL,EAAb;AACA,mBAAUL,KAAV,cAAmBE,GAAnB,eAA2BE,IAA3B;AACD;;AAED,SAASZ,uBAAT,CAAiCC,MAAjC,EAAwC;AACtC,SAAOA,MAAM,CAACa,GAAP,CAAWC,KAAK,IAAI;AACzB,WAAO;AACLC,MAAAA,KAAK,EAAED,KAAK,CAACE,IADR;AAELC,MAAAA,OAAO,EAAEH,KAAK,CAACI,GAAN,CAAUC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAFJ;AAGLC,MAAAA,YAAY,EAAEN,KAAK,CAACO,IAAN,CAAWL,IAHpB;AAILM,MAAAA,WAAW,EAAER,KAAK,CAACQ,WAJd;AAKLlB,MAAAA,IAAI,EAAEF,UAAU,CAACY,KAAK,CAACS,YAAP,CALX;AAMLC,MAAAA,YAAY,EAAEV,KAAK,CAACW,QAAN,CAAeC,KAAf,CAAqB,CAArB,EAAwBC,IANjC;AAOLC,MAAAA,GAAG,EAAEd,KAAK,CAACe,KAAN,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuB,cAAvB,EAAuC,CAAvC;AAPA,KAAP;AASD,GAVM,CAAP;AAWD","sourcesContent":["function videoSearchReducer(state = [], action) {\n  switch(action.type) {\n\n    case 'START_ADDING_VIDEOS_REQUEST':\n      return [\n        ...state\n      ]\n\n    case 'START_YOUTUBE_SEARCH_REQUEST':\n      return [\n        ...state\n      ]\n\n    case 'ADD_VIMEO_VIDEOS':\n      debugger\n      return [\n        ...createVimeoVideoObjects(action.videos.data)\n      ]\n\n    case 'ADD_YOUTUBE_VIDEOS':\n      return [\n        ...state\n      ]\n\n    default:\n      return state\n  }\n}\n\nexport default videoSearchReducer\n\nfunction formatDate(publishedAt){\n  const date = new Date(publishedAt)\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n  const month = MONTHS[date.getMonth()]\n  const day = date.getDate()\n  const year = date.getFullYear()\n  return `${month} ${day}, ${year}`\n}\n\nfunction createVimeoVideoObjects(videos){\n  return videos.map(video => {\n    return {\n      title: video.name,\n      videoId: video.uri.split('/')[2],\n      channelTitle: video.user.name,\n      description: video.description,\n      date: formatDate(video.created_time),\n      thumbnailUrl: video.pictures.sizes[1].link,\n      url: video.embed.html.match(/https[^\\s\"]+/)[0]\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}