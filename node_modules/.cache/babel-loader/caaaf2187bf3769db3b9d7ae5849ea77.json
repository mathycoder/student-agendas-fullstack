{"ast":null,"code":"var _jsxFileName = \"/Users/adamsarli/Coding/student-agendas-fullstack/client/src/progressions/IndexProgressionsContainer.js\";\nimport React, { Component } from 'react';\nimport IndexProgression from './IndexProgression';\nimport { connect } from 'react-redux';\nimport { fetchProgressions } from '../actions/progressionActions';\n\nclass IndexProgressionsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progressions: []\n    };\n\n    this.deleteProgression = progression => {\n      fetch(\"/progressions/\".concat(progression.id), {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(json => {\n        this.setState({\n          progressions: this.state.progressions.filter(prog => prog.id !== json.id)\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchProgressions();\n  }\n\n  componentDidUpdate() {\n    console.log(this.props.progressions);\n  }\n\n  // <div className=\"progressions-index-container\">\n  //   {this.props.progressions.allIds.map((progressionId, index) => {\n  //     const progression = this.state.progressions.byId[progressionId]\n  //     return <IndexProgression key={index} progression={progression} history={this.props.history} deleteProgression={this.deleteProgression}/>\n  //   })}\n  // </div>\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchProgressions: () => dispatch(fetchProgressions())\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    progressions: state.progressions\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IndexProgressionsContainer);","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/progressions/IndexProgressionsContainer.js"],"names":["React","Component","IndexProgression","connect","fetchProgressions","IndexProgressionsContainer","state","progressions","deleteProgression","progression","fetch","id","method","then","resp","json","setState","filter","prog","componentDidMount","props","componentDidUpdate","console","log","render","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;;AAEA,MAAMC,0BAAN,SAAyCJ,SAAzC,CAAmD;AAAA;AAAA;AAAA,SACjDK,KADiD,GACzC;AACNC,MAAAA,YAAY,EAAE;AADR,KADyC;;AAAA,SAajDC,iBAbiD,GAa5BC,WAAD,IAAiB;AACnCC,MAAAA,KAAK,yBAAkBD,WAAW,CAACE,EAA9B,GAAoC;AACvCC,QAAAA,MAAM,EAAE;AAD+B,OAApC,CAAL,CAGGC,IAHH,CAGQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAHhB,EAIGF,IAJH,CAIQE,IAAI,IAAI;AACZ,aAAKC,QAAL,CAAc;AACZT,UAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,CAAwBU,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYI,IAAI,CAACJ,EAAxD;AADF,SAAd;AAGD,OARH;AASD,KAvBgD;AAAA;;AAKjDQ,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,KAAL,CAAWhB,iBAAX;AACD;;AAEDiB,EAAAA,kBAAkB,GAAE;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWb,YAAvB;AACD;;AAcD;AACA;AACA;AACA;AACA;AACA;AAEAiB,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AApCgD;;AAwCnD,SAASC,kBAAT,CAA4BC,QAA5B,EAAqC;AACnC,SAAO;AACLtB,IAAAA,iBAAiB,EAAE,MAAMsB,QAAQ,CAACtB,iBAAiB,EAAlB;AAD5B,GAAP;AAGD;;AAED,SAASuB,eAAT,CAAyBrB,KAAzB,EAA+B;AAC7B,SAAO;AAACC,IAAAA,YAAY,EAAED,KAAK,CAACC;AAArB,GAAP;AACD;;AAED,eAAeJ,OAAO,CAACwB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CpB,0BAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport IndexProgression from './IndexProgression'\nimport { connect } from 'react-redux'\nimport { fetchProgressions } from '../actions/progressionActions'\n\nclass IndexProgressionsContainer extends Component {\n  state = {\n    progressions: []\n  }\n\n  componentDidMount(){\n    this.props.fetchProgressions()\n  }\n\n  componentDidUpdate(){\n    console.log(this.props.progressions)\n  }\n\n  deleteProgression = (progression) => {\n    fetch(`/progressions/${progression.id}`, {\n      method: 'DELETE'\n    })\n      .then(resp => resp.json())\n      .then(json => {\n        this.setState({\n          progressions: this.state.progressions.filter(prog => prog.id !== json.id)\n        })\n      })\n  }\n\n  // <div className=\"progressions-index-container\">\n  //   {this.props.progressions.allIds.map((progressionId, index) => {\n  //     const progression = this.state.progressions.byId[progressionId]\n  //     return <IndexProgression key={index} progression={progression} history={this.props.history} deleteProgression={this.deleteProgression}/>\n  //   })}\n  // </div>\n\n  render(){\n    return (\n      <div></div>\n    )\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    fetchProgressions: () => dispatch(fetchProgressions())\n  }\n}\n\nfunction mapStateToProps(state){\n  return {progressions: state.progressions}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IndexProgressionsContainer)\n"]},"metadata":{},"sourceType":"module"}