{"ast":null,"code":"export function addStudentProgression(student, progression) {\n  return dispatch => {\n    dispatch({\n      type: 'START_ADDING_STUDENT_PROGRESSION_REQUEST'\n    });\n    const params = {\n      student: {\n        progressionId: progression.id\n      }\n    };\n    fetch(\"/students/\".concat(student.id, \"/progressions\"), {\n      method: 'POST',\n      credentials: \"include\",\n      body: JSON.stringify(params),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(studentProgression => dispatch({\n      type: 'ADD_STUDENT_PROGRESSION',\n      studentProgression\n    }));\n  };\n}\nexport function deleteStudentProgression(student, progression) {\n  return dispatch => {\n    dispatch({\n      type: 'START_REMOVE_PROGRESSION_FROM_STUDENT_REQUEST'\n    });\n    fetch(\"/students/\".concat(student.id, \"/progressions/\").concat(progression.id), {\n      method: 'DELETE',\n      credentials: \"include\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(studentProgression => dispatch({\n      type: 'REMOVE_STUDENT_FROM_PROGRESSION',\n      studentProgression\n    }));\n  };\n}\nexport function switchStudentProgression(draggableId, newIndex) {\n  return dispatch => {\n    dispatch({\n      type: 'START_SWITCH_PROGRESSION_REQUEST',\n      draggableId,\n      newIndex\n    });\n    const params = {\n      student: {\n        newIndex: newIndex\n      }\n    };\n    const studentId = draggableId.split(\"-\")[1];\n    const progressionId = draggableId.split(\"-\")[3];\n    fetch(\"/students/\".concat(studentId, \"/progressions/\").concat(progressionId), {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(params),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(studentProgressions => dispatch({\n      type: 'SWITCH_PROGRESSION',\n      studentProgressions\n    }));\n  };\n}\nexport function updateStudentProgression(student, progression, attribute) {\n  return dispatch => {\n    fetch(\"/students/\".concat(student.id, \"/progressions/\").concat(progression.id), {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(attribute),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(studentProgression => dispatch({\n      type: 'UPDATE_STUDENT_PROGRESSION',\n      studentProgression\n    }));\n  };\n}\nexport function updateStudentProgressionStatus(student, progression, status) {\n  return dispatch => {\n    fetch(\"/students/\".concat(student.id, \"/progressions/\").concat(progression.id), {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(status),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(json => dispatch({\n      type: 'SWITCH_PROGRESSION',\n      studentProgressions: json.studentProgressions\n    }));\n  };\n}\nexport function archiveStudentProgressions(currentUser, klassId) {\n  return dispatch => {\n    fetch(\"/klasses/\".concat(klassId, \"/archive_student_progressions\"), {\n      method: 'PATCH',\n      credentials: \"include\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(studentProgressions => dispatch({\n      type: 'SWITCH_PROGRESSION',\n      studentProgressions: json.studentProgressions\n    }));\n  };\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/actions/studentProgressionActions.js"],"names":["addStudentProgression","student","progression","dispatch","type","params","progressionId","id","fetch","method","credentials","body","JSON","stringify","headers","then","resp","json","studentProgression","deleteStudentProgression","switchStudentProgression","draggableId","newIndex","studentId","split","studentProgressions","updateStudentProgression","attribute","updateStudentProgressionStatus","status","archiveStudentProgressions","currentUser","klassId"],"mappings":"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","sourcesContent":["export function addStudentProgression(student, progression) {\n  return (dispatch) => {\n    dispatch({type: 'START_ADDING_STUDENT_PROGRESSION_REQUEST'})\n    const params = {\n      student: {\n        progressionId: progression.id\n      }\n    }\n    fetch(`/students/${student.id}/progressions`, {\n      method: 'POST',\n      credentials: \"include\",\n      body: JSON.stringify(params),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(studentProgression => dispatch({ type: 'ADD_STUDENT_PROGRESSION', studentProgression }))\n  }\n}\n\nexport function deleteStudentProgression(student, progression){\n  return (dispatch) => {\n    dispatch({type: 'START_REMOVE_PROGRESSION_FROM_STUDENT_REQUEST'})\n\n    fetch(`/students/${student.id}/progressions/${progression.id}`, {\n      method: 'DELETE',\n      credentials: \"include\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(studentProgression => dispatch({ type: 'REMOVE_STUDENT_FROM_PROGRESSION', studentProgression }))\n\n  }\n}\n\nexport function switchStudentProgression(draggableId, newIndex){\n  return (dispatch) => {\n    dispatch({type: 'START_SWITCH_PROGRESSION_REQUEST', draggableId, newIndex})\n    const params = {\n      student: {\n        newIndex: newIndex\n      }\n    }\n    const studentId = draggableId.split(\"-\")[1]\n    const progressionId = draggableId.split(\"-\")[3]\n    fetch(`/students/${studentId}/progressions/${progressionId}`, {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(params),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(studentProgressions => dispatch({ type: 'SWITCH_PROGRESSION', studentProgressions }))\n  }\n}\n\nexport function updateStudentProgression(student, progression, attribute){\n  return (dispatch) => {\n    fetch(`/students/${student.id}/progressions/${progression.id}`, {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(attribute),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(studentProgression => dispatch({ type: 'UPDATE_STUDENT_PROGRESSION', studentProgression }))\n  }\n}\n\nexport function updateStudentProgressionStatus(student, progression, status){\n  return (dispatch) => {\n    fetch(`/students/${student.id}/progressions/${progression.id}`, {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(status),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(json => dispatch({ type: 'SWITCH_PROGRESSION', studentProgressions: json.studentProgressions }))\n  }\n}\n\nexport function archiveStudentProgressions(currentUser, klassId){\n  return (dispatch) => {\n    fetch(`/klasses/${klassId}/archive_student_progressions`, {\n      method: 'PATCH',\n      credentials: \"include\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(studentProgressions => dispatch({ type: 'SWITCH_PROGRESSION', studentProgressions: json.studentProgressions }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}