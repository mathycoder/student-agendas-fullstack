{"ast":null,"code":"import _objectWithoutProperties from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nconst studentProgressionReducer = combineReducers({\n  byId: studentProgressionsById,\n  allIds: allStudentProgressions\n});\nexport default studentProgressionReducer;\n\nfunction studentProgressionsById(state = {}, action) {\n  switch (action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return {};\n\n    case 'ADD_STUDENTS':\n      return _objectSpread({}, normalizedObjectCreator(action.studentProgressions));\n\n    case 'START_ADDING_STUDENT_PROGRESSION_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'ADD_STUDENT_PROGRESSION':\n      return _objectSpread({}, state, {}, normalizedObjectCreator([action.studentProgression]));\n\n    case 'START_SWITCH_PROGRESSION_REQUEST':\n      const allSps = _objectSpread({}, state);\n\n      const modifiedObjs = switchAgendaOrder(action, allSps);\n      return _objectSpread({}, state, {\n        modifiedObjs\n      });\n\n    case 'SWITCH_PROGRESSION':\n      return _objectSpread({}, state, {}, normalizedObjectCreator(action.studentProgressions));\n\n    case 'UPDATE_STUDENT_PROGRESSION':\n      return _objectSpread({}, state, {}, normalizedObjectCreator([action.studentProgression]));\n\n    case 'START_REMOVE_PROGRESSION_FROM_STUDENT_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const studentProgId = \"studentProgression\".concat(action.studentProgression.id);\n\n      const value = state[studentProgId],\n            newState = _objectWithoutProperties(state, [studentProgId].map(_toPropertyKey));\n\n      return _objectSpread({}, newState);\n\n    default:\n      return state;\n  }\n}\n\nfunction allStudentProgressions(state = [], action) {\n  switch (action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return [];\n\n    case 'ADD_STUDENTS':\n      return [...action.studentProgressions.map(stPr => \"studentProgression\".concat(stPr.id))];\n\n    case 'ADD_STUDENT_PROGRESSION':\n      return [...state, \"studentProgression\".concat(action.studentProgression.id)];\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const stProgIdToDelete = \"studentProgression\".concat(action.studentProgression.id);\n      return state.filter(pId => pId !== stProgIdToDelete);\n\n    case 'DELETE_PROGRESSION':\n      const spsToRemove = action.studentProgressions.map(sp => \"studentProgression\".concat(sp.id));\n      return state.filter(sp => !spsToRemove.includes(sp));\n\n    default:\n      return state;\n  }\n}\n\nfunction switchAgendaOrder(action, allSps) {\n  let currStProgression;\n  let myStudentProgressions = [];\n  const studId = \"student\".concat(action.draggableId.split(\"-\")[1]);\n  const progId = \"progression\".concat(action.draggableId.split(\"-\")[3]);\n\n  for (const sp in allSps) {\n    if (allSps[sp].studentId === studId) {\n      myStudentProgressions.push(allSps[sp]);\n    }\n\n    if (allSps[sp].studentId === studId && allSps[sp].progressionId === progId) {\n      currStProgression = allSps[sp];\n    }\n  }\n\n  myStudentProgressions = myStudentProgressions.sort((a, b) => a.agendaIndex - b.agendaIndex);\n  myStudentProgressions = myStudentProgressions.filter(sp => sp.id !== currStProgression.id);\n  myStudentProgressions.splice(action.newIndex, 0, currStProgression);\n  const modifiedObj = {};\n  myStudentProgressions.forEach((sp, index) => {\n    sp.agendaIndex = index;\n    modifiedObj[\"studentProgression\".concat(sp.id)] = sp;\n  });\n  return modifiedObj;\n}\n\nfunction normalizedObjectCreator(studentProgressions) {\n  const normalizedObject = {};\n  studentProgressions.forEach(stProg => {\n    normalizedObject[\"studentProgression\".concat(stProg.id)] = {\n      id: stProg.id,\n      agendaIndex: stProg.agenda_index,\n      studentId: \"student\".concat(stProg.student_id),\n      progressionId: \"progression\".concat(stProg.progression_id),\n      submitted: stProg.submitted,\n      submittedAt: stProg.submitted_at,\n      createdAt: stProg.created_at,\n      updatedAt: stProg.updated_at,\n      question1Answer: stProg.question1_answer,\n      question1Comment: stProg.question1_comment,\n      graded: stProg.graded,\n      gradedAt: stProg.graded_at\n    };\n  });\n  return normalizedObject;\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/studentProgressionReducer.js"],"names":["combineReducers","studentProgressionReducer","byId","studentProgressionsById","allIds","allStudentProgressions","state","action","type","normalizedObjectCreator","studentProgressions","studentProgression","allSps","modifiedObjs","switchAgendaOrder","studentProgId","id","value","newState","map","stPr","stProgIdToDelete","filter","pId","spsToRemove","sp","includes","currStProgression","myStudentProgressions","studId","draggableId","split","progId","studentId","push","progressionId","sort","a","b","agendaIndex","splice","newIndex","modifiedObj","forEach","index","normalizedObject","stProg","agenda_index","student_id","progression_id","submitted","submittedAt","submitted_at","createdAt","created_at","updatedAt","updated_at","question1Answer","question1_answer","question1Comment","question1_comment","graded","gradedAt","graded_at"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\nconst studentProgressionReducer = combineReducers({\n  byId: studentProgressionsById,\n  allIds: allStudentProgressions\n})\n\nexport default studentProgressionReducer\n\nfunction studentProgressionsById(state = {}, action) {\n  switch(action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return {}\n\n    case 'ADD_STUDENTS':\n    return {\n      ...normalizedObjectCreator(action.studentProgressions)\n    }\n\n    case 'START_ADDING_STUDENT_PROGRESSION_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'ADD_STUDENT_PROGRESSION':\n      return {\n        ...state,\n        ...normalizedObjectCreator([action.studentProgression])\n      }\n\n    case 'START_SWITCH_PROGRESSION_REQUEST':\n      const allSps = {...state}\n      const modifiedObjs = switchAgendaOrder(action, allSps)\n      return {...state, modifiedObjs }\n\n    case 'SWITCH_PROGRESSION':\n      return {...state, ...normalizedObjectCreator(action.studentProgressions)}\n\n    case 'UPDATE_STUDENT_PROGRESSION':\n      return {\n        ...state,\n        ...normalizedObjectCreator([action.studentProgression])\n      }\n\n    case 'START_REMOVE_PROGRESSION_FROM_STUDENT_REQUEST':\n      return {...state}\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const studentProgId = `studentProgression${action.studentProgression.id}`\n      const { [studentProgId]: value, ...newState  } = state\n\n      return {\n        ...newState\n      }\n\n    default:\n      return state\n  }\n}\n\nfunction allStudentProgressions(state = [], action) {\n\n  switch(action.type) {\n    case 'CLEAR_CURRENT_USER':\n      return []\n\n    case 'ADD_STUDENTS':\n    return [\n      ...action.studentProgressions.map(stPr => `studentProgression${stPr.id}`)\n    ]\n\n    case 'ADD_STUDENT_PROGRESSION':\n    return [\n      ...state, `studentProgression${action.studentProgression.id}`\n    ]\n\n    case 'REMOVE_STUDENT_FROM_PROGRESSION':\n      const stProgIdToDelete = `studentProgression${action.studentProgression.id}`\n      return state.filter(pId => pId !== stProgIdToDelete)\n\n    case 'DELETE_PROGRESSION':\n      const spsToRemove = action.studentProgressions.map(sp => `studentProgression${sp.id}`)\n      return state.filter(sp => !spsToRemove.includes(sp))\n    default:\n      return state\n  }\n}\n\nfunction switchAgendaOrder(action, allSps){\n  let currStProgression\n  let myStudentProgressions = []\n  const studId = `student${action.draggableId.split(\"-\")[1]}`\n  const progId = `progression${action.draggableId.split(\"-\")[3]}`\n  for(const sp in allSps){\n    if (allSps[sp].studentId === studId) {\n      myStudentProgressions.push(allSps[sp])\n    }\n    if (allSps[sp].studentId === studId && allSps[sp].progressionId === progId){\n      currStProgression = allSps[sp]\n    }\n  }\n\n  myStudentProgressions = myStudentProgressions.sort((a,b) => a.agendaIndex - b.agendaIndex)\n  myStudentProgressions = myStudentProgressions.filter(sp => sp.id !== currStProgression.id)\n  myStudentProgressions.splice(action.newIndex, 0, currStProgression)\n\n  const modifiedObj = {}\n  myStudentProgressions.forEach((sp, index) => {\n    sp.agendaIndex = index\n    modifiedObj[`studentProgression${sp.id}`] = sp\n  })\n  return modifiedObj\n}\n\nfunction normalizedObjectCreator(studentProgressions){\n  const normalizedObject = {}\n  studentProgressions.forEach(stProg => {\n    normalizedObject[`studentProgression${stProg.id}`] = {\n      id: stProg.id,\n      agendaIndex: stProg.agenda_index,\n      studentId: `student${stProg.student_id}`,\n      progressionId: `progression${stProg.progression_id}`,\n      submitted: stProg.submitted,\n      submittedAt: stProg.submitted_at,\n      createdAt: stProg.created_at,\n      updatedAt: stProg.updated_at,\n      question1Answer: stProg.question1_answer,\n      question1Comment: stProg.question1_comment,\n      graded: stProg.graded,\n      gradedAt: stProg.graded_at\n    }\n  })\n  return normalizedObject\n}\n"]},"metadata":{},"sourceType":"module"}