{"ast":null,"code":"import _defineProperty from \"/Users/adamsarli/Coding/student-agendas-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nconst videoReducer = combineReducers({\n  byId: videosById,\n  allIds: allVideos\n});\nexport default videoReducer;\n\nfunction videosById(state = {}, action) {\n  switch (action.type) {\n    case 'START_ADDING_VIDEOS_REQUEST':\n      return _objectSpread({}, state);\n\n    case 'ADD_VIDEOS':\n      const normalizedObject = {};\n      action.videos.forEach(video => {\n        normalizedObject[\"video\".concat(video.id)] = video;\n      });\n      return _objectSpread({}, normalizedObject);\n\n    case 'ADD_PROGRESSION':\n      const normalizedObj = {};\n      action.progression.videos.forEach(video => {\n        normalizedObj[\"video\".concat(video.id)] = video;\n      });\n      return _objectSpread({}, normalizedObj);\n\n    default:\n      return state;\n  }\n}\n\nfunction allVideos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_VIDEOS':\n      return [...action.videos.map(video => \"video\".concat(video.id))];\n\n    case 'ADD_PROGRESSION':\n      return [...action.progression.videos.map(video => \"video\".concat(video.id))];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/reducers/videoReducer.js"],"names":["combineReducers","videoReducer","byId","videosById","allIds","allVideos","state","action","type","normalizedObject","videos","forEach","video","id","normalizedObj","progression","map"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAGD,eAAe,CAAC;AACnCE,EAAAA,IAAI,EAAEC,UAD6B;AAEnCC,EAAAA,MAAM,EAAEC;AAF2B,CAAD,CAApC;AAKA,eAAeJ,YAAf;;AAEA,SAASE,UAAT,CAAoBG,KAAK,GAAG,EAA5B,EAAgCC,MAAhC,EAAwC;AACtC,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAK,6BAAL;AACE,+BACKF,KADL;;AAIF,SAAK,YAAL;AACE,YAAMG,gBAAgB,GAAG,EAAzB;AACAF,MAAAA,MAAM,CAACG,MAAP,CAAcC,OAAd,CAAsBC,KAAK,IAAI;AAC7BH,QAAAA,gBAAgB,gBAASG,KAAK,CAACC,EAAf,EAAhB,GAAuCD,KAAvC;AACD,OAFD;AAGA,+BACKH,gBADL;;AAIF,SAAK,iBAAL;AACE,YAAMK,aAAa,GAAG,EAAtB;AACAP,MAAAA,MAAM,CAACQ,WAAP,CAAmBL,MAAnB,CAA0BC,OAA1B,CAAkCC,KAAK,IAAI;AACzCE,QAAAA,aAAa,gBAASF,KAAK,CAACC,EAAf,EAAb,GAAoCD,KAApC;AACD,OAFD;AAIA,+BACKE,aADL;;AAIF;AACE,aAAOR,KAAP;AA3BJ;AA6BD;;AAGD,SAASD,SAAT,CAAmBC,KAAK,GAAG,EAA3B,EAA+BC,MAA/B,EAAuC;AAErC,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAK,YAAL;AACE,aAAO,CACL,GAAGD,MAAM,CAACG,MAAP,CAAcM,GAAd,CAAkBJ,KAAK,mBAAYA,KAAK,CAACC,EAAlB,CAAvB,CADE,CAAP;;AAIF,SAAK,iBAAL;AACE,aAAO,CACL,GAAGN,MAAM,CAACQ,WAAP,CAAmBL,MAAnB,CAA0BM,GAA1B,CAA8BJ,KAAK,mBAAYA,KAAK,CAACC,EAAlB,CAAnC,CADE,CAAP;;AAIF;AACE,aAAOP,KAAP;AAbJ;AAeD","sourcesContent":["import { combineReducers } from 'redux'\n\nconst videoReducer = combineReducers({\n  byId: videosById,\n  allIds: allVideos\n})\n\nexport default videoReducer\n\nfunction videosById(state = {}, action) {\n  switch(action.type) {\n\n    case 'START_ADDING_VIDEOS_REQUEST':\n      return {\n        ...state\n      }\n\n    case 'ADD_VIDEOS':\n      const normalizedObject = {}\n      action.videos.forEach(video => {\n        normalizedObject[`video${video.id}`] = video\n      })\n      return {\n        ...normalizedObject\n      }\n\n    case 'ADD_PROGRESSION':\n      const normalizedObj = {}\n      action.progression.videos.forEach(video => {\n        normalizedObj[`video${video.id}`] = video\n      })\n\n      return {\n        ...normalizedObj\n      }\n\n    default:\n      return state\n  }\n}\n\n\nfunction allVideos(state = [], action) {\n\n  switch(action.type) {\n\n    case 'ADD_VIDEOS':\n      return [\n        ...action.videos.map(video => `video${video.id}`)\n      ]\n\n    case 'ADD_PROGRESSION':\n      return [\n        ...action.progression.videos.map(video => `video${video.id}`)\n      ]\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}