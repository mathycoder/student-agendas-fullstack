{"ast":null,"code":"export function fetchProgressions() {\n  return dispatch => {\n    dispatch({\n      type: 'START_ADDING_PROGRESSIONS_REQUEST'\n    });\n    fetch(\"/progressions\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(progressions => {\n      if (progressions.error) {\n        console.log(\"Can't load progressions\");\n      } else {\n        dispatch({\n          type: 'ADD_PROGRESSIONS',\n          progressions\n        });\n      }\n    });\n  };\n}\nexport function addProgression(progression) {\n  return dispatch => {\n    dispatch({\n      type: 'START_ADDING_PROGRESSION_REQUEST'\n    });\n    fetch(\"/progressions\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(progression => {\n      dispatch({\n        type: 'ADD_PROGRESSION',\n        progression\n      });\n      dispatch({\n        type: 'ADD_FLASH_MESSAGE',\n        message: \"Progression Added\"\n      });\n    });\n  };\n}\nexport function editProgression(progression) {\n  return dispatch => {\n    dispatch({\n      type: 'START_EDITING_PROGRESSION_REQUEST'\n    });\n    fetch(\"/progressions/\".concat(progression.progression.id), {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(progression => {\n      dispatch({\n        type: 'EDIT_PROGRESSION',\n        progression\n      });\n    });\n  };\n}\nexport function deleteProgression(progression) {\n  return dispatch => {\n    dispatch({\n      type: 'START_DELETING_PROGRESSION_REQUEST'\n    });\n    fetch(\"/progressions/\".concat(progression.id), {\n      method: 'DELETE',\n      credentials: \"include\"\n    }).then(resp => resp.json()).then(progression => dispatch({\n      type: 'DELETE_PROGRESSION',\n      progression\n    }));\n  };\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/student-agendas-fullstack/client/src/actions/progressionActions.js"],"names":["fetchProgressions","dispatch","type","fetch","method","credentials","headers","then","resp","json","progressions","error","console","log","addProgression","progression","body","JSON","stringify","message","editProgression","id","deleteProgression"],"mappings":"AAAA,OAAO,SAASA,iBAAT,GAA6B;AAClC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAC,IAAAA,KAAK,kBAAkB;AACrBC,MAAAA,MAAM,EAAE,KADa;AAErBC,MAAAA,WAAW,EAAE,SAFQ;AAGrBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHY,KAAlB,CAAL,CAOGC,IAPH,CAOQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAPhB,EAQGF,IARH,CAQQG,YAAY,IAAI;AACpB,UAAIA,YAAY,CAACC,KAAjB,EAAuB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,OAFD,MAEO;AACLZ,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,kBAAR;AAA4BQ,UAAAA;AAA5B,SAAD,CAAR;AACD;AACJ,KAdD;AAeD,GAjBD;AAkBD;AAED,OAAO,SAASI,cAAT,CAAwBC,WAAxB,EAAqC;AAC1C,SAAQd,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAC,IAAAA,KAAK,kBAAkB;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,WAAW,EAAE,SAFQ;AAGrBW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAHe;AAIrBT,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJY,KAAlB,CAAL,CAQGC,IARH,CAQQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EARhB,EASGF,IATH,CASQQ,WAAW,IAAI;AACnBd,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,iBAAR;AAA2Ba,QAAAA;AAA3B,OAAD,CAAR;AACAd,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,mBAAR;AAA6BiB,QAAAA,OAAO,EAAE;AAAtC,OAAD,CAAR;AACD,KAZH;AAcD,GAhBD;AAiBD;AAGD,OAAO,SAASC,eAAT,CAAyBL,WAAzB,EAAsC;AAC3C,SAAQd,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAC,IAAAA,KAAK,yBAAkBY,WAAW,CAACA,WAAZ,CAAwBM,EAA1C,GAAgD;AACnDjB,MAAAA,MAAM,EAAE,OAD2C;AAEnDC,MAAAA,WAAW,EAAE,SAFsC;AAGnDW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAH6C;AAInDT,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJ0C,KAAhD,CAAL,CAQGC,IARH,CAQQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EARhB,EASGF,IATH,CASQQ,WAAW,IAAI;AACnBd,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,kBAAR;AAA4Ba,QAAAA;AAA5B,OAAD,CAAR;AACD,KAXH;AAaD,GAfD;AAgBD;AAED,OAAO,SAASO,iBAAT,CAA2BP,WAA3B,EAAwC;AAC7C,SAAQd,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAC,IAAAA,KAAK,yBAAkBY,WAAW,CAACM,EAA9B,GAAoC;AACvCjB,MAAAA,MAAM,EAAE,QAD+B;AAEvCC,MAAAA,WAAW,EAAE;AAF0B,KAApC,CAAL,CAIGE,IAJH,CAIQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAJhB,EAKGF,IALH,CAKQQ,WAAW,IAAId,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,oBAAR;AAA8Ba,MAAAA;AAA9B,KAAD,CAL/B;AAMD,GARD;AASD","sourcesContent":["export function fetchProgressions() {\n  return (dispatch) => {\n    dispatch({type: 'START_ADDING_PROGRESSIONS_REQUEST'})\n    fetch(`/progressions`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(resp => resp.json())\n      .then(progressions => {\n        if (progressions.error){\n          console.log(\"Can't load progressions\")\n        } else {\n          dispatch({ type: 'ADD_PROGRESSIONS', progressions })\n        }\n    })\n  }\n}\n\nexport function addProgression(progression) {\n  return (dispatch) => {\n    dispatch({type: 'START_ADDING_PROGRESSION_REQUEST'})\n    fetch(`/progressions`, {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(progression => {\n        dispatch({ type: 'ADD_PROGRESSION', progression })\n        dispatch({ type: 'ADD_FLASH_MESSAGE', message: \"Progression Added\" })\n      })\n\n  }\n}\n\n\nexport function editProgression(progression) {\n  return (dispatch) => {\n    dispatch({type: 'START_EDITING_PROGRESSION_REQUEST'})\n    fetch(`/progressions/${progression.progression.id}`, {\n      method: 'PATCH',\n      credentials: \"include\",\n      body: JSON.stringify(progression),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(resp => resp.json())\n      .then(progression => {\n        dispatch({ type: 'EDIT_PROGRESSION', progression })\n      })\n\n  }\n}\n\nexport function deleteProgression(progression) {\n  return (dispatch) => {\n    dispatch({type: 'START_DELETING_PROGRESSION_REQUEST'})\n    fetch(`/progressions/${progression.id}`, {\n      method: 'DELETE',\n      credentials: \"include\"\n    })\n      .then(resp => resp.json())\n      .then(progression => dispatch({ type: 'DELETE_PROGRESSION', progression }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}